#!/bin/sh
# configure script for AKFAvatar - library and program for using an avatar
# Copyright (C) 2007, 2008, 2009 Andreas K. Foerster
# Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Antonio Diaz Diaz.
#
# This configure script is free software; you have unlimited permission
# to copy, distribute and modify it.


# Version and name
VERSION=0
SUBVERSION=17
REVISION=1
VARIANT="-devel"
LIBNAME=libakfavatar.so.${VERSION}.${SUBVERSION}.${REVISION}
SONAME=libakfavatar.so.${VERSION}.${SUBVERSION}

invocation_name=$0
args=
no_create=
pkgname=akfavatar
pkgversion=${VERSION}.${SUBVERSION}.${REVISION}${VARIANT}
srctrigger=akfavatar.h
SIZE=DEFAULT
OLDSDL=
OPENPTY=
FORCE_ICONV=
WCHAR_ENCODING=
SDL_IMAGE="yes"
LINK_SDL_IMAGE="no"

# clear some things potentially inherited from environment.
srcdir=
prefix=/usr/local
exec_prefix='$(prefix)'
bindir='$(exec_prefix)/bin'
libdir='$(exec_prefix)/lib'
includedir='$(exec_prefix)/include'
datadir='$(prefix)/share'
infodir='$(datadir)/info'
docdir='$(datadir)/doc/$(pkgname)'
mandir='$(datadir)/man'
sysconfdir='$(prefix)/etc'
CC=
CXX=
CPPFLAGS=
CFLAGS='-O2'
CXXFLAGS='-O2'
LDFLAGS=
AVATARSAY_LDFLAGS=
INSTALL='install'
AR='ar'
RANLIB='ranlib'
LDCONFIG='ldconfig'
LOCAL_RPATH=
LOCAL_GCC_RPATH=
LOCAL_FPC_RPATH=

# Loop over all args
while [ x"$1" != x ] ; do

	# Get the first arg, and shuffle
	option=$1
	shift

	# Add quoted option to args
	args="${args} \"${option}\""

	# Split out the argument for options that take them
	case ${option} in
	*=*) optarg=`echo ${option} | sed -e 's,^[^=]*=,,'` ;;
	esac

	# Process the options
	case ${option} in
	--help | --he*)
		echo "Usage: configure [options]"
		echo
		echo "Options: [defaults in brackets]"
		echo "  --help               display this help and exit"
		echo "  --version             output version information and exit"
		echo "  --srcdir=DIR          find the sources in DIR [. or ..]"
		echo "  --prefix=DIR          install into DIR [${prefix}]"
		echo "  --exec-prefix=DIR     base directory for arch-dependent files [${exec_prefix}]"
		echo "  --bindir=DIR          user executables directory [${bindir}]"
		echo "  --datadir=DIR         base directory for doc and data [${datadir}]"
		echo "  --infodir=DIR         info files directory [${infodir}]"
		echo "  --mandir=DIR          man pages directory [${mandir}]"
		echo "  --docdir=DIR          documentation directory [${docdir}]"
		echo "  --sysconfdir=DIR      read-only single-machine data directory [${sysconfdir}]"
		echo "  --with-openpty        use openpty instead of posix_openpt"
		echo "  --with-oldsdl         support for older SDL versions on target machine"
		echo "  --with-iconv[=enc]    force use of external iconv (normally not needed)"
		echo "  --with-sdl-iconv=enc  set encoding for wchar_t when SDL's iconv is used"
		echo "  --disable-audio       disable audio support"
		echo "  --disable-sdl-image   disable support for SDL_image completely"
		echo "  --enable-link-sdl-image link directly to SDL_image"
		#echo "  --enable-qvga         compile for small QVGA (320x240) displays"
		#echo "  --enable-size=qvga    compile for small QVGA (320x240) displays"
		echo "  --enable-vga          compile for VGA (640x480) displays"
		echo "  --enable-size=vga     compile for VGA (640x480) displays"
		echo "  CC=COMPILER           C compiler to use [gcc]"
		echo "  CXX=COMPILER          C++ compiler to use [g++]"
		echo "  CPPFLAGS=OPTIONS      command line options for the preprocessor [${CPPFLAGS}]"
		echo "  CFLAGS=OPTIONS        command line options for the C compiler [${CFLAGS}]"
		echo "  CXXFLAGS=OPTIONS      command line options for the C++ compiler [${CXXFLAGS}]"
		echo "  LDFLAGS=OPTIONS       command line options for the linker [${LDFLAGS}]"
		echo "  AR=program            ar program to use [${AR}]"
		echo "  RANLIB=program        ranlib program to use [${RANLIB}]"
		echo "  INSTALL=program       install program to use [${INSTALL}]"
		echo "  LDCONFIG=program      ldconfig program to use [${LDCONFIG}]"
		echo
		exit 0 ;;
	--version | --ve*)
		echo "Configure script for ${pkgname} version ${pkgversion}"
		exit 0 ;;
	--srcdir* | --sr*)
		srcdir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--prefix* | --pr*)
		prefix=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--exec-prefix* | --ex*)
		exec_prefix=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--bindir* | --bi*)
		bindir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--datadir* | --da*)
		datadir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--infodir* | --in*)
		infodir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--docdir* | --do*)
		docdir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--mandir* | --ma*)
		mandir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--sysconfdir* | --sy*)
		sysconfdir=`echo ${optarg} | sed -e 's,/$,,'` ;;
	--no-create | --no-c*)
		no_create=yes ;;

	CC=*)       CC=${optarg} ;;
	CXX=*)      CXX=${optarg} ;;
	CPPFLAGS=*) CPPFLAGS=${optarg} ;;
	CFLAGS=*)   CFLAGS=${optarg} ;;
	CXXFLAGS=*) CXXFLAGS=${optarg} ;;
	LDFLAGS=*)  LDFLAGS=${optarg} ;;
	AR=*)       AR=${optarg} ;;
	RANLIB=*)   RANLIB=${optarg} ;;
	INSTALL=*)  INSTALL=${optarg} ;;
	LDCONFIG=*) LDCONFIG=${optarg} ;;

        --with-openpty) OPENPTY="yes" ;;
        --with-oldsdl) OLDSDL="yes" ;;
	--with-sdl-iconv=*) WCHAR_ENCODING=${optarg} ;;
	--with-sdl-iconv) ;;
	--with-iconv) FORCE_ICONV="yes" ;;
	--with-iconv=*) FORCE_ICONV="yes"; WCHAR_ENCODING=${optarg} ;;
	--with-iconv) FORCE_ICONV="yes" ;;
	--enable-link-sdl-image | \
	--enable-link-sdl-image=yes) LINK_SDL_IMAGE="yes" ;;
	--enable-link-sdl-image=no | \
	--disable-link-sdl-image | \
	--disable-link-sdl-image=yes) LINK_SDL_IMAGE="no" ;;
	--disable-sdl-image | \
	--disable-sdl-image=yes) SDL_IMAGE="no" ;;
	--enable-sdl-image | \
	--enable-sdl-image=yes) SDL_IMAGE="yes" ;;
	--enable-qvga | --enable-qvga=yes | --enable-size=qvga) SIZE="QVGA" ;;
	--enable-vga | --enable-vga=yes | --enable-size=vga) SIZE="VGA" ;;
	--disable-audio | \
	--enable-audio=no | \
	--disable-audio=yes) NO_AUDIO="yes" ;;
	
	--build=* | --enable-* | --with-* | --*dir=* | *=* | *-*-*) ;;
	*)
		echo "configure: Unrecognized option: \"${option}\"; use --help for usage." 1>&2
		exit 1 ;;
	esac
done

[ "$SIZE" = "QVGA" ] && CFLAGS="$CFLAGS -DQVGA"
[ "$SIZE" = "VGA" ] && CFLAGS="$CFLAGS -DVGA"

if [ "$OPENPTY" = "yes" ]; then
  CFLAGS="$CFLAGS -DUSE_OPENPTY"
  AVATARSAY_LDFLAGS="-lutil"
fi

# old SDL is meant for the target machine 
# and independant of the systems SDL-Version
[ "$OLDSDL" = "yes" ] && CFLAGS="$CFLAGS -DOLD_SDL=1"
[ "$FORCE_ICONV" = "yes" ] && CFLAGS="$CFLAGS -DFORCE_ICONV=1"
[ -n "$WCHAR_ENCODING" ] \
  && CFLAGS="$CFLAGS -DWCHAR_ENCODING=\\\"$WCHAR_ENCODING\\\""

# Check for SDL version
sdlversion=`sdl-config --version`
case ${sdlversion} in
  "")    echo "SDL develop environment not found" 1>&2
         echo "I need version 1.2.x (x >= 6)" 1>&2 
         exit 1 ;;
  1.2.*) sdlrevision=`echo ${sdlversion} | sed -e 's,.\..\.,,'`
         if test ${sdlrevision} -ge 6
         then
           echo "SDL ${sdlversion} found - okay" 1>&2 
	 else
	   echo "SDL ${sdlversion} found - not everything supported" 1>&2
	 fi ;;
  *)     echo "SDL ${sdlversion} found - but I need 1.2.x (x >= 6)" 1>&2
         exit 1 ;;
esac

SDLCFLAGS=`sdl-config --cflags`
SDLLDFLAGS=`sdl-config --libs`

if [ "$SDL_IMAGE" = "no" ]
then 
  SDLCFLAGS="$SDLCFLAGS -DNO_SDL_IMAGE"
  LINK_SDL_IMAGE="no"
fi

if [ "$LINK_SDL_IMAGE" = "yes" ] 
then 
  SDLCFLAGS="$SDLCFLAGS -DLINK_SDL_IMAGE"
  SDLLDFLAGS="$SDLLDFLAGS -lSDL_image"
fi

if [ "$NO_AUDIO" = "yes" ]
then
  CFLAGS="$CFLAGS -DNO_AUDIO"
fi

# system specific stuff
SYSTEM=`uname -s`
case ${SYSTEM} in
  Linux | linux)     SYSTEM="gnu-linux" 
                     # the token $ORIGIN seems to be specific to 
                     # GLibC 2.1 or higher - otherwise ignored
                     LOCAL_RPATH='$$ORIGIN:.'
                     ;;
  FreeBSD | freebsd) SYSTEM="freebsd"
                     LDFLAGS="${LDFLAGS} -lpthread -Wl,-rpath,'${libdir}'" 
                     LOCAL_RPATH="."
                     ;;
esac

if [ ! x"${LOCAL_RPATH}" = x ] ; then
  LOCAL_GCC_RPATH="-Wl,-rpath,'$LOCAL_RPATH'"
  LOCAL_FPC_RPATH="-k-rpath -k'$LOCAL_RPATH'"
fi

ARCH=`uname -m`
case ${ARCH} in
  i?86) ARCH="x86" ;;
esac

# Find the source files, if location was not specified.
srcdirtext=
if [ x"${srcdir}" = x ] ; then
	srcdirtext="or . or .." ; srcdir=.
	if [ ! -r ${srcdir}/${srctrigger} ] ; then srcdir=.. ; fi
	if [ ! -r ${srcdir}/${srctrigger} ] ; then
		## the sed command below emulates the dirname command
		srcdir=`echo ${invocation_name} | sed -e 's,[^/]*$,,;s,/$,,;s,^$,.,'`
	fi
fi

if [ ! -r ${srcdir}/${srctrigger} ] ; then
	exec 1>&2
	echo
	echo "configure: Can't find sources in ${srcdir} ${srcdirtext}"
	echo "configure: (At least ${srctrigger} is missing)."
	exit 1
fi

# Set srcdir to . if that's what it is.
if [ "`pwd`" = "`cd ${srcdir} ; pwd`" ] ; then srcdir=. ; fi

# checking whether we are using GNU C.
if [ x"${CC}" = x ] ; then		# Let the user override the test.
	if [ -x /bin/gcc ] ||
	   [ -x /usr/bin/gcc ] ||
	   [ -x /usr/local/bin/gcc ] ; then
		CC="gcc"
	else
		CC="cc"
	fi
fi

# checking whether we are using GNU C++.
if [ x"${CXX}" = x ] ; then		# Let the user override the test.
	if [ -x /bin/g++ ] ||
	   [ -x /usr/bin/g++ ] ||
	   [ -x /usr/local/bin/g++ ] ; then
		CXX="g++"
	else
		CXX="c++"
	fi
fi

echo
if [ x${no_create} = x ] ; then
	echo "creating config.status"
	rm -f config.status
	cat > config.status << EOF
#!/bin/sh
# This file was generated automatically by configure. Do not edit.
# Run this file to recreate the current configuration.
#
# This script is free software; you have unlimited permission
# to copy, distribute and modify it.

exec /bin/sh ${invocation_name} ${args} --no-create
EOF
	chmod +x config.status
fi

echo "creating Makefile"
echo "VERSION = ${VERSION}"
echo "SUBVERSION = ${SUBVERSION}"
echo "REVISION = ${REVISION}"
echo "VARIANT = ${VARIANT}"
echo "LIBNAME = ${LIBNAME}"
echo "SONAME = ${SONAME}"
echo "LOCAL_RPATH = ${LOCAL_RPATH}"
echo "srcdir = ${srcdir}"
echo "prefix = ${prefix}"
echo "exec_prefix = ${exec_prefix}"
echo "bindir = ${bindir}"
echo "libdir = ${libdir}"
echo "includedir = ${includedir}"
echo "datadir = ${datadir}"
echo "infodir = ${infodir}"
echo "mandir = ${mandir}"
echo "docdir = ${docdir}"
echo "sysconfdir = ${sysconfdir}"
echo "CC = ${CC}"
echo "CXX = ${CXX}"
echo "CPPFLAGS = ${CPPFLAGS}"
echo "CFLAGS = ${CFLAGS}"
echo "CXXFLAGS = ${CXXFLAGS}"
echo "LDFLAGS = ${LDFLAGS}"
echo "SDLCFLAGS = ${SDLCFLAGS}"
echo "SDLLDFLAGS = ${SDLLDFLAGS}"
echo "AVATARSAY_LDFLAGS = ${AVATARSAY_LDFLAGS}"
echo "AR = ${AR}"
echo "RANLIB = ${RANLIB}"
echo "INSTALL = ${INSTALL}"
echo "LDCONFIG = ${LDCONFIG}"
echo "SYSTEM = ${SYSTEM}"
echo "ARCH = ${ARCH}"

VERSIONNR=`printf "%02d%02d%02d" ${VERSION} ${SUBVERSION} ${REVISION}`
rm -f version.h
cat > version.h << EOF
/* version information */
/* This file was generated automatically by configure. Do not edit. */

#define AVTVERSION "${VERSION}.${SUBVERSION}.${REVISION}${VARIANT}"
#define AVTVERSIONNR ${VERSIONNR}
EOF

rm -f Makefile
cat > Makefile << EOF
# Makefile for AKFAvatar
# Copyright (C) 2007 Andreas K. Foerster
# Copyright (C) 2003, 2004, 2005, 2006, 2007 Antonio Diaz Diaz.
# This file was generated automatically by configure. Do not edit.
#
# This Makefile is free software; you have unlimited permission
# to copy, distribute and modify it.

VERSION = ${VERSION}
SUBVERSION = ${SUBVERSION}
REVISION = ${REVISION}
VARIANT = ${VARIANT}
LIBNAME = ${LIBNAME}
SONAME = ${SONAME}
pkgname = ${pkgname}
pkgversion = ${pkgversion}
srcdir = ${srcdir}
prefix = ${prefix}
exec_prefix = ${exec_prefix}
bindir = ${bindir}
libdir = ${libdir}
includedir = ${includedir}
datadir = ${datadir}
infodir = ${infodir}
docdir = ${docdir}
mandir = ${mandir}
sysconfdir = ${sysconfdir}
CC = ${CC}
CXX = ${CXX}
CPPFLAGS = ${CPPFLAGS}
CFLAGS = ${CFLAGS}
CXXFLAGS = ${CXXFLAGS}
LDFLAGS = ${LDFLAGS}
AVATARSAY_LDFLAGS = ${AVATARSAY_LDFLAGS}
AR = ${AR}
RANLIB = ${RANLIB}
INSTALL = ${INSTALL}
LDCONFIG = ${LDCONFIG}
SDLCFLAGS = ${SDLCFLAGS}
SDLLDFLAGS = ${SDLLDFLAGS}
SYSTEM = ${SYSTEM}
ARCH = ${ARCH}
LOCAL_GCC_RPATH = ${LOCAL_GCC_RPATH}
LOCAL_FPC_RPATH = ${LOCAL_FPC_RPATH}

EOF
cat ${srcdir}/Makefile.in >> Makefile

rm -f ${srcdir}/doc/version.texi
cat > ${srcdir}/doc/version.texi <<EOF
@c This file was generated automatically by configure. Do not edit.

@set VERSION ${VERSION}.${SUBVERSION}.${REVISION}${VARIANT}
@set UPDATED $(date +%Y-%m-%d)

EOF

if [ -d ${srcdir}/mingw ]
then
  {
    echo "VERSION = ${VERSION}"
    echo "SUBVERSION = ${SUBVERSION}"
    echo "REVISION = ${REVISION}"
    echo "VARIANT = ${VARIANT}"
  } > ${srcdir}/mingw/version
fi

echo '*'
echo '* OK. Now you can run "make" to build the binaries.'
echo '*'

