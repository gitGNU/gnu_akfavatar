Lua-Modul für Übersetzungen

Dieses Modul wurde für AKFAvatar geschrieben, aber es kann auch ohne AKFAvatar
verwendet werden.

require "akfavatar.lang"
  Damit lädt man das Modul für Übersetzungen. Die System-Sprache sollte
  automatisch erkannt werden, wenn das Modul geladen wird.


lang.getlanguage()
  Erkenne die System-Sprache. Die Sprache ist eine zweibuchstabige Abkürzung
  gemäß ISO 639-1.


lang.use(Sprache)
  Stattdessen diese Sprache verwenden. Das kann man für Testzwecke benutzen,
  oder wenn man einen besseren Weg weiß, die System-Sprache herauszufinden.


lang.translations {...}
  Definiere die Übersetzungen (siehe Beispiel weiter unten).


lang.translate(s)
  Gibt den übersetzten String zurück. Falls keine Übersetzung zur Verfügung
  steht, dann wird der String unverändert zurück gegeben.

  Es ist sehr nützlich, einen lokalen Alias namens L anzulegen:
    local L = lang.translate;
  Dann kann man einfach eine String-Konstante damit einleiten: L"Hello"


BEISPIEL:
--------------------------------------------------------------------------------
require "akfavatar.lang";

lang.translations {

  ["Hello world!"] = {
    ru="Здравствуй мир!",
    el="Καλημέρα κόσμε!",
    es="¡Hola mundo!",
    fr="Bonjour le monde!",
    de="Hallo Welt!",
    sv="Hej Världen!",
    },

  ["That's live!"] = {
    de="So ist das Leben!",
    fr="C'est la vie!" },
};

-- lang.use("de");

local L = lang.translate;

print(L"Hello world!");
print(L"That's live!");
--------------------------------------------------------------------------------

TIPPS:

Diese Modul kümmert sich nicht um die Zeichensatz-Kodierung. Ein guter Ansatz
ist, wenn man "UTF-8" für alles verwenden kann. Ein anderer Ansatz wäre es,
die Kodierung selbst zu einem übersetzbaren String zu machen, wobei man
"US-ASCII" für Englisch verwenden sollte.

Obwohl es nicht notwendig ist, sollte man Englisch als Ausgangssprache
verwenden.

Falls die System-Sprache nicht automatisch erkannt wird, kann man die
Umgebungsvariable LANG so setzen, dass sie mit dem benötigten Code anfängt.
Der benötigte Code ist eine zweibuchstabige Abkürzung gemäß ISO 639-1.

Wenn man Text mit Variablen dazwischen hat, ist es kein guter Ansatz, den Text
in Teile aufzuteilen. Es ist besser einen Format-String für string.format() zu
definieren.

Der übersetzbare String muss exakt übereinstimmen. Bitte daran denken, dass
wenn man die Strings im Programm abändert, man auch die Übersetzungstabelle
anpassen muss!
