Module "akfavatar-graphic"

To use this module load it with require "akfavatar-graphic".

Notes:
- Coordinates start with 1, 1 in the upper left corner.
- The pen size, position, heading and color are set for each graphic.


graphic.new([width, height])
    Creates a new graphic (a canvas).
    When width and height are not given it uses the whole window/screen.
    A thin black pen is chosen and the position is centered, heading to
    the top, drawing.

    Retuns the graphic, the width and the height (ie. three values).

    Use it like this:
      local gr, width, height = graphic.new()


graphic.fullsize()
    Returns the width and height for a graphic so that it fills the whole window.


gr:show()
    Shows the graphic as image after drawing.

    Hint: You can show intermediate images, continue drawing, wait a while
    and then show the next step and so on.  This makes a nice animation.
    But don't make the steps too small, or it will be painfull on slow devices.


gr:size()
    Returns the width and the height of the graphic gr.


gr:width()
    Returns the width of the graphic gr.


gr:height()
    Returns the height of the graphic gr.


gr:color(colorname)
    Sets the drawing color.
    The color can be either a defined color name,
    or a hexadecimal representation, like for example "#FFFF00".


gr:rgb(red, green, blue)
    Sets the drawing color from RGB values.
    The values must be in the range from 0 to 255 inclusive.
    This method is faster than using gr:color().


gr:eraser()
    Sets the drawing color to the background color.


gr:thickness(value)
    Sets the thickness of the pen.  The value 1 is the thinnest.


gr:clear([colorname])
    Fills the graphic with the given color.
    It uses the background color for AKFAvatar if no color is given or if the
    colorname is invalid.
    The pen position is not changed.


gr:putpixel([x, y])
    Puts a pixel at the given coordinates or at the current pen position.
    The pen position is not changed.


gr:getpixel([x, y])
    Gets the pixel color at the given coordinates or at the current pen position.
    The color is returned as string in the hexadicimal RGB notation.
    On error it returns nil and an error message.
    The pen position is not changed.


gr:getpixelrgb([x, y])
    Gets the pixel color at the given coordinates or at the current pen position.
    Returns three integers for red, green and blue, in the range of 0-255.
    On error it returns nil and an error message.
    The pen position is not changed.


gr:putdot([x, y])
    Puts a dot at the given coordinates or at the current pen position.
    If the pen thin, it's the same as gr:putpixel.
    The pen position is not changed.


gr:pen_position()
    Returns the x and y position of the pen (ie. returns two values).


gr:center()
gr:home()
    Sets the pen to the center of the graphic, heading to the top.


gr:moveto(x, y)
    Move the pen to x, y without drawing.


gr:moverel(x, y)
    Move the pen without drawing relative to its current position.
    A positive x value moves it to the right,
    a negative x value moves it to the left.
    A positive y value moves it down,
    a negative y value moves it up.


gr:lineto(x, y)
    Draws a line from the current pen position to these absolute coordinates.
    The pen is moved to the new coordinates.


gr:linerel(x, y)
    Draws a line relative to its current pen position.
    A positive x value draws to the right,
    a negative x value draws to the left.
    A positive y value draws down,
    a negative y value draws up.
    The pen is moved to the new position.


gr:line(x1, y1, x2, y2)
    Draws a line from x1, y1 to x2, y2.
    The pen is set to x2, y2.


gr:bar(x1, y1, x2, y2)
    Draws a solid bar with x1, y2 as the upper left corner
    and x2, y2 as the lower right corner.
    The pen position is not changed.


gr:rectangle(x1, y1, x2, y2)
    Draws rectangle with x1, y2 as the upper left corner
    and x2, y2 as the lower right corner.
    The pen position is not changed.


gr:arc(x, y, radius [,startangle, endangle])
gr:circle(x, y, radius [,startangle, endangle])
    Draws a circle with x, y as the center with the given radius.
    The pen is put to the center of the circle (ie. to the given x, y)

    You can draw a part of the circle (an arc) by giving the startangle and
    endangle in degree.  The arc is drawn clockwise.


gr:text(text [, x, y])
    Prints a text aligned to the given position or the pen position.

    By default the text is centered to the position.  But you can change this
    with gr:textalign().

    The encoding is used from the AKFAvatar settings.  However no other of
    those settings are taken into account.  The color is the drawing color for
    the graphic.  There is currently no easy way to make boldface, underlined or
    inverted text.

    You can use all printable characters, but control characters are not
    supported, even not a newline.

    The pen position is not changed.


gr:textalign([horizontal] [, vertical])
    Sets the textalignment for gr:text().

    The horizontal alignment can be one of "left", "center" or "right".  The
    default is "center".

    The vertical alignment can be one of "top", "center" or "bottom".  The
    default is "center".

    The alignment means, where the given point is, eg. when you tell it to be
    "left"-aligned, the fixed point is on the left, but the text runs to the
    right.


graphic.font_size()
gr:font_size()
    Returns the width and the hight of the font, ie. one character.
    It is a fixed-width font, each character has the same width.


gr:put(graphic, x, y)
    Puts a small graphic onto graphic gr at the given position (upper-left corner).
    The previous content is overwritten (no transparency supported).


gr:get(x1, y1, x2, y2)
    Returns an area of the graphic gr as a new graphic.
    Most settings are copied, exept the size and the pen settings.
    The pen is put in the center, heading to the top.
    All values must be in range.


gr:duplicate()
    Returns an exact duplicate (a copy) of the graphic gr.
    The graphic-specific settings are copied, too.
    This is faster than using gr:get().

    You can use this for example to create a fixed background and then draw the
    individual foregrounds on duplicates.


gr:export_ppm(filename)
    Exports the graphic as Portable Pixmap (PPM) file.


Turtle graphics
===============

gr:heading(heading)
    Sets the heading for the turtle.  The value must be given in degree and the
    turtle turns clockwise. The value 0 means, it's heading to the top,
    90 means it heads to the right.


gr:get_heading()
    Returns the heading of the turtle (see gr:heading()).


gr:right(degree)
    Turn the turtle clockwise by the specified angle in degree.


gr:left(degree)
    Turn the turtle counterclockwise by the specified angle in degree.


gr:draw(true|fase)
    Put the pen in the draw position (true) or in the idle position (false).
    This is only relevatn for the methods gr:froward() and gr:back()
    (see below).


gr:forward(steps)
    Move the turtle forward in the direction it is heading.
    It draws a line if the pen is in the draw position (gr:draw(true)).


gr:back(steps)
    Move the turtle back in the opposite direction it is heading.
    The turtle is not turned around.
    It draws a line if the pen is in the draw position (gr:draw(true)).


gr:home()
    Sets the pen to the center of the graphic, heading to the top.
