.\" Process this file with
.\" groff -man -Tutf8 akfavatar-term.de.man
.\"
.
.\" Macros .TQ .EX .EE taken from groff an-ext.tmac
.\" Copyright (C) 2007, 2009 Free Software Foundation, Inc.
.\" You may freely use, modify and/or distribute this file.
.
.\" Continuation line for .TP header.
.de TQ
.  br
.  ns
.  TP \\$1\" no doublequotes around argument!
..
.
.\" Start example.
.de EX
.  nr mE \\n(.f
.  nf
.  nh
.  ft CW
..
.
.
.\" End example.
.de EE
.  ft \\n(mE
.  fi
.  hy \\n(HY
..
.
.TH "akfavatar-term" 3 2012-07-21 AKFAvatar
.nh
.
.SH NAME
akfavatar-term \- Modul zum Ausf\[:u]hren von Terminal-basierten Programmen in AKFAvatar
.
.SH SYNTAX
.PP
term = require "akfavatar-term"
.PP
.BR Hinweis :
Man muss eine globale Variable verwenden, wenn man die APC-Schnittstelle
verwenden will.
.PP
.SH BESCHREIBUNG
.PP
Dieses Modul kann man verwenden um allgemeine Terminal-basierte Programme
innerhalb von AKFAvatar laufen zu lassen.
Die Terminal-Emulation emuliert eine Linux-Textkonsole
(nicht nur auf Linux-basierten Systemen).
.PP
Es kann auch daf\[:u]r verwendet werden, um spezifische Programme f\[:u]r AKFAvatar zu
schreiben, in Programmiersprachen, die ansonsten nicht unterst\[:u]tzt werden.
Es gibt ein paar M\[:o]glichkeiten mit denen das ausf\[:u]hrende Skript und das
auszuf\[:u]hrende Programm miteinander kommunizieren k\[:o]nnen.
.PP
.BR Achtung :
Dieses Modul steht nicht f\[:u]r allen Plattformen zur Verf\[:u]gung!
Insbesondere nicht f\[:u]r Windows.
.PP
.TP
.BI term.startdir( [Verzeichnis] )
Legt das Anfangsverzeichnis f\[:u]r den n\[:a]chsten
.BR term.execute() -Befehl
fest.
Wenn kein
.I Verzeichnis
angegeben wird, wird die vorherige Einstellung dadurch gel\[:o]scht.
.IP
.BR Hinweis :
Das Arbeitsverzeichnis des ausf\[:u]hrenden Skriptes und des ausgef\[:u]hrten
Programmes sind voneinander unabh\[:a]ngig!
.PP
.TP
.B term.homedir()
Setzt das Anfangsverzeichnis f\[:u]r den n\[:a]chsten
.BR term.execute() -Befehl
auf das Heimatverzeichnis des Benutzers.
.IP
.BR Hinweis :
Das Arbeitsverzeichnis des ausf\[:u]hrenden Skriptes und des ausgef\[:u]hrten
Programmes sind voneinander unabh\[:a]ngig!
.PP
.TP
.BI term.color( "true|false" )
Schaltet die Farbunterst\[:u]tzung ein oder aus.
Der Terminal-Typ mit Farben ist \[Bq]linux\[lq],
ohne Farben \[Bq]linux-m\[lq].
.PP
.TP
.BI term.setenv( "Variable, Wert" )
Setzt die angegebene
.RI Umgebungs variable
auf den angegebenen
.IR Wert .
.br
Das hat auch Einfluss auf Programme, die mit
.BR os.execute() " oder " io.popen()
ausgef\[:u]hrt werden.
.PP
.TP
.BI term.unsetenv( Variable )
L\[:o]scht die angegebene
.RI Umgebungs variable .
.br
Das hat auch Einfluss auf Programme, die mit
.BR os.execute() " oder " io.popen()
ausgef\[:u]hrt werden.
.PP
.TP
.BI term.execute( "[Programm [, Argumente]]" )
F\[:u]hrt das angegebene
.I Programm
mit den angegebenen
.IR Argumente n
in der Terminal-Emulation aus.
Wenn kein
.I Programm
angegeben wird, wird die Standard-Shell ausgef\[:u]hrt.
.PP
.SS APC-Schnittstelle
.PP
Die \[Bq]Application Program Command\[lq] (APC) Schnittstelle ist
eine Methode mit der das ausgef\[:u]hrte Programm mit dem Lua-Interpreter
des ausf\[:u]hrenden Programmes kommunizieren kann.
Um dies zu verwenden sendet das ausgef\[:u]hrte Programm Escape-Sequenzen der Art,
wie ESC + \[Bq]_\[lq], gefolgt vom Befehl, abgeschlossen mit 
ESC + \[Bq]\\\[lq].
Die Ausgabe muss eventuell noch einen Flush bekommen, um einen sofortigen
Effekt zu erzielen.
.PP
Zum Beispiel in C:
.PP
.EX
static void
APC (const char *s)
{
  fprintf (stdout, "\\033_%s\\033\\\\", s);
  fflush (stdout);
}
.EE
.PP
Die Befehle k\[:o]nnen Lua-Funktionsaufrufe sein, insbesondere die 
\[Bq]avt.\[lq]-Befehle von \[Bq]lua-akfavatar\[lq]
(siehe \[Bq]lua-akfavatar-ref\[lq]).
.br
Bis zu 1024 Zeichen k\[:o]nnen gesendet werden.
Das bedeutet, man kann keinen komplizierten Code vom ausgef\[:u]hrten Programm
senden.
Allerdings kann man im Lua-Skript, das das Programm aufruft globale Funktionen
definieren, die dann auch mit der APC-Schnittstelle aufrufbar sind.
.PP
Als Konvention sollte das aufrufende Skript eine Umgebungsvariable namens
.I "\[Bq]APC\[lq]"
definieren, die die verf\[:u]gbaren Funktionen beschreibt.
.PP
Zum Beispiel:
.PP
.EX
  term.setenv("APC", _VERSION .. ", lua-akfavatar")
.EE
.PP
.TP
.BI term.send( String )
Sendet einen String an das ausgef\[:u]hrte Programm, so als ob es von der
Tastatur eingegeben worden w\[:a]re.
Das kann man nur von der APC-Schnittstelle (siehe oben) verwenden.
.br
Wenn das ausgef\[:u]hrte Programm zeilenorientiert ist, sollte der String mit
einem \[Bq]\\r\[lq] (wie Return) abgeschlossen werden.
.PP
.TP
.BI term.decide( "String1 [,String2]" )
Zeige Plus-/Minus-Kn\[:o]pfe und abh\[:a]ngig von dieser Auswahl sende
.IR String1 " oder " String2
an das ausgef\[:u]hrte Programm, so als ob es von Tastatur eingegeben
worden w\[:a]re.
Das kann man nur von der APC-Schnittstelle (siehe oben) verwenden.
.br
Wenn das ausgef\[:u]hrte Programm zeilenorientiert ist, sollten beide Strings
angegeben werden und beide mit einem \[Bq]\\r\[lq] (wie Return)
abgeschlossen werden.
.PP
.SH "SIEHE AUCH"
.BR lua-akfavatar (1)
.BR lua (1)
.BR lua-akfavatar-ref (3)
.BR akfavatar-graphic (3)
.BR akfavatar.utf8 (3)
