\input texinfo   @c -*-texinfo-*-

@comment %**start of header
@setfilename akfavatar-de.info
@settitle AKFAvatar Anleitung
@afourpaper
@comment %**end of header

@include version.texi

@documentlanguage de
@documentencoding UTF-8

@comment In Namen für nodes muss man die Umlaute maskieren!

@iftex
  @frenchspacing on
@end iftex

@dircategory Miscellaneous
@direntry
* AKFAvatar: (akfavatar-de).    Ein grafischer Avatar
@end direntry

@copying
Dies ist die Bedienungsanleitung für AKFAvatar
(Version @value{VERSION}, @value{UPDATED}).

@quotation
AKFAvatar ist ein lustiger Terminal-Emulator, ein Text-Betrachter, eine 
Skript-Sprache um Demos zu erstellen und eine Programmbibliothek um 
dafür Programme in C oder Pascal zu schreiben.

Homepage: @uref{http://akfavatar.nongnu.org/}

Copyright @copyright{} 2007, 2008, 2009 Andreas K. Förster,
@uref{http://akfoerster.de/}

Vervielfältigung und Verbreitung dieser Anleitung, mit oder ohne Veränderungen,
sind ohne Gebühr in jeglicher Form erlaubt, solange der Copyright Vermerk
sowie dieser Hinweis erhalten bleiben.
@end quotation
@end copying

@titlepage
@title AKFAvatar
@subtitle Ein lustiges Terminal und mehr
@author Andreas K. Förster

@c Die folgendern Befehle erzeugen die Copyright Seite.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Das Inhaltsverzeichnis
@contents

@ifnottex
@node Top
@top AKFAvatar

@insertcopying
@end ifnottex

@menu
* @"Uberblick::                    Überblick über AKFAvatar
* Installation::		   AKFAvatar installieren
* Verwendung von avatarsay::       Verwendung des Werkzeugs @command{avatarsay}
* Verwendung von gnome-akfavatar:: Wie man es unter @acronym{GNOME} verwendet
* Formate::                        Dateiformate und andere Angaben
* Programmierung::                 Programmierung mit AKFAvatar
* Pascal Referenz::                Referenz für Pascal
* C Referenz::                     Die C Header Datei @code{akfavatar.h}
* Farbnamen::                      Namen der Farben
* Index::                          Index für diese Dokumentation
@end menu


@node @"Uberblick
@chapter Überblick über AKFAvatar
@cindex Überblick

AKFAvatar ist ein graphisches Programm und eine Bibliothek, bei denen ein
Avatar auf dem Bildschirm erscheint und dem Benutzer Sachen in einer
Sprechblase mitteilt.  Man kann auch Audio-Aufnahmen abspielen lassen, so dass
der Benutzer sogar hören kann, was der Avatar sagt.

AKFAvatar kann auf verschiedene Arten eingesetzt werden.  Ich liste sie hier
kurz auf, angefangen von der einfachsten bis zur kompliziertesten für 
fortgeschrittene Benutzer.

@enumerate
@item
Man kann das Programm @command{avatarsay} als Text-Terminal verwenden, 
so wie @command{xterm}, nur lustiger. Im Gegensatz zu @command{xterm} 
läuft es eventuell auch ohne einen X-Server.
(Für Windows steht diese Funktion nicht zur Verfügung.)

@item
Man kann Textmodus-Programme auch direkt mit @command{avatarsay} öffnen lassen.
(Für Windows steht diese Funktion nicht zur Verfügung.)

@item
Der Befehl @command{avatarsay} kann als lustiger Text-Betrachter verwendet 
werden, mehr oder weniger wie @command{more} oder @command{less}.

Das ist nicht gerade für lange und komplizierte Texte geeignet, sondern eher
für kurze, lustige Sachen.

@item
Aber der Befehl @command{avatarsay} kann noch viel mehr.  Er kann als einfache 
Skript-Sprache verwendet werden, mit der man Demos erstellen kann, die man zum
Beispiel an Info-Ständen oder in Schaufenstern zeigen kann.

Keine Angst, das klingt viel komplizierter als es ist.  Vielleicht sollte ich
eher sagen, man kann seine Texte mit gelegentlichen Anweisungen aufpeppen.

@item
Dann gibt es da noch die Programmbibliothek @code{libakfavatar}, die man von
kompilierenden Sprachen aus verwenden kann.  Zur Zeit werden @w{Free Pascal},
@acronym{GNU}-Pascal und C unterstützt.  Insbesondere die Sprache Pascal
ist für Anfänger geeignet, die programmieren lernen wollen.  Die Bibliothek ist
so einfach zu verwenden, wie Kommandozeilen-Programme zu schreiben --- es macht
aber wesentlich mehr Spaß!

@end enumerate

@page
@section Allgemeine Verwendung (Tasten)
@cindex Tasten

@cindex Stoppen (Esc-Taste)
Wenn ein AKFAvatar-Programm in einem Fenster läuft, kann man natürlich 
einfach den Schließen-Knopf des Fenster-Managers betätigen, um es zu beenden.  
Man kann das Programm aber auch jederzeit mit der Tastenkombination 
@key{Alt}+@key{Q} abbrechen, zum Beispiel, wenn es im Vollbild-Modus läuft.
Meistens kann man das Programm auch einfach mit der @key{Esc}-Taste beenden.  
Diese Taste kann jedoch auch für andere Aufgaben reserviert sein, zum Beispiel 
im Terminal-Modus von @command{avatarsay}.

@cindex pausieren (Pause-Taste)
Man kann jederzeit die @key{Pause}-Taste betätigen, um die Programmausführung
anzuhalten.
Durch den Druck auf eine andere Taste, kann die Pause wieder aufgehoben werden.

@cindex umschalten Vollbild/Fenster
@cindex Vollbild-Modus
@cindex Fenster-Modus
Auf manchen Systemen kann man die Tastenkombinationen @key{Alt}+@key{Enter} 
oder @key{Strg}+@key{Alt}+@key{F} verwenden um zwischen der Darstellung im 
Fenster oder der Vollbild-Darstellung hin und her zu schalten.  Häufig kann
man dazu auch einfach die Taste @key{F11} drücken.  Diese Taste kann 
jedoch auch für andere Aufgaben reserviert sein, zum Beispiel im Terminal-Modus
von @command{avatarsay}.

@cindex Fenster Verwendung
Wenn AKFAvatar in einem Fenster läuft, kann man die Fenstergröße verändern,
wenn man will.  Die Größe des Inhaltes wird dadurch aber nicht verändert,
sondern der Inhalt wird lediglich auf dem Fenster zentriert.  Man kann das 
Fenster nicht unter eine bestimmte Mindestgröße verkleinern.  Man kann das 
Fenster natürlich auch maximieren.  Wenn man das Fenster minimiert, läuft 
das Programm übrigens weiter.  Man sollte also vielleicht die @key{Pause}-Taste
drücken, bevor man das Fenster minimiert.

@node Installation
@chapter AKFAvatar installieren
@cindex Installation

Obwohl auch Pakete mit Binärdateien zur Verfügung stehen, sollte man 
AKFAvatar vom Quelltext-Paket installieren um das vollständige Potential
der Software ausnutzen zu können.

Dieses Kapitel beschreibt die Installation für @sc{posix}-kompatible
Betriebssysteme, hauptsächlich für GNU/Linux.  Es gibt ein paar Hinweise 
für andere Systeme am Ende dieses Kapitels.

Kurz gesagt: @samp{./configure && make && make install}

@section Voraussetzungen

@subheading Benötigt

@itemize
@item SDL-1.2.x (Version 1.2.11 oder höher empfohlen)@*
Die 1.3-Serie ist @emph{nicht} rückwärtskompatibel!@*
@uref{http://libsdl.org/download-1.2.php}@*
Man benötigt die ``Runtime Libraries'' sowie die ``Development Libraries''!

Natürlich benötigt SDL eine grafische Umgebung.
Zum Beispiel das X-Window-System oder einen Linux Framebuffer@enddots{}

@item Einen ANSI-C Compiler (gcc oder andere)@*
@uref{http://gcc.gnu.org/}

@item Einträge für ``linux'' und ``linux-m'' in der Terminal-Datenbank.

Dies ist auch auf Systemen erforderlich, welche nicht auf dem Kernel Linux 
basieren, aber nicht unter Windows.  Unter Debian und davon abgeleiteten 
Distributionen muss hierfür das Paket ``ncurses-term'' installiert sein.
@end itemize

@subheading Empfohlen

@itemize
@item SDL_image@*
@uref{http://www.libsdl.org/projects/SDL_image/}@*
Dabei sind die ``Runtime Libraries'' ausreichend@*
SDL_image benötigt wiederum andere Bibliotheken:
libz, libpng, libjpeg, libtiff

Ohne SDL_image kann man nur XPM und unkomprimierte BMP Dateien verwenden.
SDL_image kann auch nach der Installation dieses Paketes noch 
nachinstalliert werden.

@item iconv@*
ist auf vielen Systemen bereits integriert
@end itemize

@subheading Optional

@itemize
@item GNU-Pascal oder Free Pascal@*
@uref{http://www.gnu-pascal.de/}@*
@uref{http://www.freepascal.org/}
@end itemize

@section Installation

@subheading Kompilieren

Zunächst sollte man @samp{./configure} aufrufen.  Wenn das klappt, kann
man @samp{make} eingeben, um die ausführbaren Programme zu kompilieren.
Es werden zwei Varianten von avatarsay kompiliert: 1. ``avatarsay'' ist
speziell dafür erstellt worden, dass man es auch ohne Installation verwenden
kann.  2. ``avatarsay-d'' wird nur funktionieren, wenn man zuvor die Bibliothek
installiert hat.  Diese Variante wird für die Installation verwendet.

@subsubheading Kompilieren --- Sonderfälle
@cindex VGA
@cindex iconv

Auf einigen Systemen muss man den Parameter @option{--with-iconv} bei
@command{./configure} mit angeben, um vollständige iconv-Unterstützung zu
erhalten (iconv ist ein Zeichenkodierungs-Konverter).  Dieser Parameter wird
nicht benötigt, wenn bereits die SDL so konfiguriert wurde, dass sie ein 
externes iconv verwendet.  Auf manchen Systemen ist dies jedoch nicht der 
Fall, obwohl ein iconv existiert (zum Beispiel, weil evtl. verschiedene
Implementierungen existieren).
Diese Software (AKFAvatar) versucht den richtigen Namen für die interne 
Kodierung von @code{wchar_t} zu erraten.  Das klappt aber nicht in jedem
Fall.  Man kann dann diese Information zusammen mit dieser Option angeben,
und zwar folgendermaßen: @samp{--with-iconv=UCS-4LE}.  Auf vielen Systemen
kann man mit dem Befehl @command{iconv -l} eine Liste erhalten.  Wenn
`WCHAR_T'' oder ``wchar_t'' auf dieser Liste steht, sollte man es damit
versuchen.

Wenn man weiß, dass SDL_image auf jeden Fall installiert ist, kann man den
Parameter @option{--enable-link-sdl-image} angeben.  Dadurch wird die 
Bibliothek direkt mit SDL_image verlinkt, anstatt dass diese zur Laufzeit 
nachgeladen werden muss.

Um ältere SDL-Versionen auf dem Ziel-Computer zu unterstützen, könnte
es notwendig sein, den Parameter @option{--with-oldsdl} bei 
@command{./configure} zu verwenden.  Das ist jedoch nicht notwendig, wenn
man das Programm nur auf dem selben Computer verwenden will, auf dem
man es kompiliert.

Wenn man es auf Geräten mit einer kleinen Anzeige verwenden will, kann man
den Parameter @option{--enable-size=vga} mit configure verwenden.  
Der Wert @code{vga} steht dabei für eine Auflösung
von 640*480 Pixeln.

@subheading Testen

Das Programm @command{avatarsay} ist ein Text-Betrachter und eine simple
Skript-Sprache.  Man kann sich zum Beispiel die Installations-Anleitung
mit diesem Programm folgendermaßen ansehen: @samp{./avatarsay INSTALL}.

Man kann @command{avatarsay} jederzeit mit der Taste @key{Esc} beenden.
Auf einigen Systemen kann man zwischen dem Vollbild-Modus und dem 
Fenster-Modus mit der Taste @key{F11} umschalten.  Auch die 
@key{Pause}-Taste ist hier sehr nützlich.

In dem Paket befinden sich ein paar Beispiel-Skripte.  Zum Beispiel
sollte man mal @samp{./fsdemo-de} ausprobieren.  Man kann die Datei
@file{fsdemo-de} in einem Text-Editor öffnen, um sich anzusehen, wie
man so etwas selber umsetzen kann@enddots{}

Man kann es auch als ein lustiges Manpage-Leseprogramm einsetzen.
Hierfür gibt man zum Beispiel den Befehl @samp{avtman man} 
ein@enddots{}

@subsubheading Das Skript @command{lrun}
@cindex lrun

Dynamisch gelinkte Programme setzen normalerweise voraus, dass die
Bibliotheken auf dem System schon installiert sind.  Das Skript 
@command{lrun} kann verwendet werden, um Programme zu starten, wenn die
Bibliothek noch nicht installiert ist.  Es sucht die Bibliotheken auch
in dem Verzeichnis, in dem es sich selber befindet, sowie im aktuellen 
Verzeichnis.  Man kann es wie folgt verwenden: @samp{./lrun example}
findet die Bibliothek im aktuellen Verzeichnis.  Oder beispielsweise
vom Pascal Unterverzeichnis aus @samp{../lrun multiply} findet die 
Bibliothek im übergeordneten Verzeichnis (wo sich @command{lrun} selber
befindet).

@subheading Installieren

Bei GNU/Linux sollte man zunächst sicher stellen, dass @file{/usr/local/lib}
in der Datei @file{/etc/ld.so.conf} aufgeführt ist; entweder direkt, oder 
indirekt.  Ebenso sollte man sicher stellen, dass @file{/usr/local/bin} 
in der @code{PATH} Umgebungsvariablen mit eingetragen ist.

Nun sollte man sich als root einloggen und @samp{make install} eingeben
um das Ganze nach @file{/usr/local} zu installieren.  Falls man wenig
Speicherplatz auf der Festplatte hat, kann man stattdessen auch 
@samp{make install-strip} verwenden.  Das installiert die Binärdateien
ohne Debugger-Informationen.

Wenn man das Ganze später wieder deinstallieren will, kann man dann
den Befehl @samp{make uninstall} verwenden.

@subsubheading Weitere Möglichkeiten

Mit dem Befehl @samp{make example} kann man das Programm @file{example.c}
kompilieren.  Die Datei @file{example.c} ist ein Beispiel, das man als 
Ausgangspunkt für eigene Programme verwenden kann.  Das Programm wird 
dynamisch verlinkt, das bedeutet, dass die Bibliothek bereits installiert
sein muss.  Wenn man es ausprobieren will, ohne dass die Bibliothek 
installiert ist, kann man das Skript @command{lrun} verwenden (siehe oben).

@subheading Problem-Lösungen
@cindex Problem-Lösungen

@itemize
@item Problem: Das System kann die Bibliothek @file{libakfavatar.so} nicht finden.

Lösung: zunächst kann man versuchen das Verzeichnis @file{/usr/local/lib}, 
oder wohin man das auch immer installiert hat, bei der Umgebungs-Variablen 
@code{LD_LIBRARY_PATH} mit aufzuführen: 
@samp{export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib}.

Als dauerhaftere Lösung sollte man sicher stellen, dass @file{/usr/local/lib}
direkt oder indirekt in der Datei @file{/etc/ld.so.conf} aufgeführt ist.
Dann sollte man mit root-Rechten den Befehl @command{ldconfig} aufrufen.

@item Problem: Einige Zeichen werden bei @command{avatarsay} nicht richtig 
angezeigt.

Lösung: Es gibt verschiedene Zeichensatz-Kodierungen.  Man könnte versuchen 
die Parameter @option{--utf-8} oder @option{--latin1} mit anzugeben.

@end itemize

@subheading Andere Systeme

@subsubheading BSD
AKFAvatar ist mit FreeBSD 6.2 kompilierbar.  Um iconv-Unterstützung zu 
erhalten, muss man @code{libiconv} installiert haben und
@samp{./configure --with-iconv} verwenden.

@subsubheading Windows
Windows wird nur teilweise unterstützt.  Ich stelle Binärdateien zur
Verfügung, die mit einem Crosscompiler erstellt wurden.  Da ich es nie
direkt unter Windows selber kompiliert habe, kann ich dazu wenig sagen.
Tut mir Leid.

Für solche Systeme wird ein @code{iconv}-Ersatz in der SDL verwendet.
Der Zeichensatz Windows-1252 (häufig als ``ANSI'' bezeichnet, er hat aber
nichts mit @acronym{ANSI} zu tun) wird nicht vollständig unterstützt.  Dieser 
Zeichensatz ist jedoch teilweise kompatibel zu dem Standard ISO-8859-1,
welcher unterstützt wird.  Einige Zeichen entsprechen jedoch nicht dem
Standard.  Falls diese Zeichen unbedingt benötigt werden, kann man den 
Text als UTF-8 abspeichern, welches ebenfalls unterstützt wird.


@node Verwendung von avatarsay
@chapter Verwendung des Werkzeugs @command{avatarsay}
@cindex avatarsay
@cindex Eingabe-Aufforderung
@cindex Kommandozeilen Werkzeug

Dieses Kapitel erklärt die verschiedenen Anwendungsbereiche des 
Werkzeugs @command{avatarsay}.

@menu
* Text-Terminal::	         Einsatz als lustiges Text-Terminal
* Text-Betrachter::              Einsatz als lustiger Text-Betrachter
* Den Text ausf@"uhrbar machen:: Wie man seinen Text in ein Programm verwandelt
* Anderes Avatar-Bild::          Wie man ein anderes Avatar-Bild verwendet
* Aufruf von avatarsay::         Die genaue Verwendung von @command{avatarsay}
* Anweisungen f@"ur avatarsay::  Anweisungen für das Programm @command{avatarsay}
* Pipes::                        Pipes
* Archiv-Dateien::               Archiv-Dateien
@end menu

@node Text-Terminal
@section Einsatz von @command{avatarsay} als lustiges Text-Terminal
@cindex Text-Terminal

Das Programm @command{avatarsay} kann auf @sc{posix}-kompatiblen Systemen 
(nicht unter Windows) als lustiges Text-Terminal und als ein Frontend für 
Textkonsolen-Programme verwendet werden.

Man kann im Hauptmenü den Punkt ``Terminal-Modus'' auswählen, oder man kann
den Befehl @command{avatarsay} mit der Option @option{--terminal}, oder kurz
@option{-t} aufrufen. Damit bekommt man eine Terminal-Sitzung mit der Shell,
welche auf dem System für das Benutzerkonto eingerichtet ist. 
Falls man keine Farben in der Sprechblase mag, kann man außerdem die Option
@option{--nocolor}, oder kurz @option{-b} verwenden.

Falls man eine andere Shell oder ein anderes Startverzeichnis bevorzugt, kann
man über die Umgebungsvariablen @env{SHELL}, beziehungsweise @env{HOME} 
andere Werte einstellen.  Das Programm kommt aber auch damit klar, wenn diese
Umgebungsvariablen nicht gesetzt sind.

@subsection Als Benutzeroberfläche für Textkonsolen-Programme
@cindex Frontend
@cindex Benutzeroberfläche
@cindex Oberfläche
@cindex Wrapper
@cindex Textkonsolen-Programme
@cindex Konsolen-Programme

Man kann @command{avatarsay} als Benutzeroberfläche für Textkonsolen-Programme 
verwenden.
Dazu verwende man die Option @option{--execute}, oder kurz @option{-x}, gefolgt
vom Namen des auszuführenden Programmes.  Man kann dies natürlich auch mit der 
Option @option{--nocolor} kombinieren.  Optionen, die nach dem Programmnamen
angegeben werden, werden an das aufgerufene Programm weitergeleitet.  Das
bedeutet, dass die Reihenfolge der Optionen wichtig ist.

Zum Beispiel, um sich mit Hilfe von @command{ssh} in einen anderen Rechner
einzuloggen:
@example
avatarsay --execute ssh example.net
@end example

um eine E-Mail mit dem Programm @command{mutt} zu schreiben:
@example
avatarsay -bx mutt pal@@example.net
@end example

um die E-Mail mit einem Mailprogramm auf dem anderen Rechner zu erstellen:
@example
avatarsay -bx ssh -t example.net mutt pal
@end example

Zu beachten: Wenn man @command{ssh} auf diese Weise einsetzt, muss man die 
Option @option{-t} bei @command{ssh} mit angeben.

um mit dem Programm @command{lynx} im Web zu surfen:
@example
avatarsay -bx lynx
@end example

Wie man sieht, kann man wirklich ziemlich ausgefallene Sachen damit machen.


@subsection Der Terminal-Typ

Das Programm @command{avatarsay} simuliert die Text-Konsole des Kernels Linux.
Darum wird die Umgebungsvariable @env{TERM} entweder auf @code{linux} oder auf 
@code{linux-m} eingestellt.

Da dieses Verhalten für einige Verwirrungen sorgen könnte, versuche ich hier
mal zu erklären, was das @emph{nicht} bedeutet:

@itemize
@item
Das bedeutet @emph{nicht}, dass das Programm auf Systeme mit dem Kernel Linux
beschränkt ist.  Es wurde erfolgreich unter FreeBSD getestet und sollte auf 
vielen anderen @sc{posix}-kompatiblen Systemen ebenfalls ohne weiteres laufen.

@item
Das bedeutet @emph{nicht}, dass die Umgebungsvariable @env{TERM} auf anderen
Systemen angepasst werden sollte.  Sie sollte einfach so bleiben, wie sie ist.
Das System sollte jedoch Einträge für @code{linux} und @code{linux-m} in seiner
Terminal-Datenbank haben.

@item
Das bedeutet @emph{nicht}, dass ich Code von Linux verwendet hätte.  Ich habe
nur die Manpage @code{console_codes} gelesen, sowie die Einträge in 
Terminfo und Termcap Datenbanken verglichen und einige andere Anleitungen 
gelesen, um mir Informationen zu beschaffen.

@item
Das bedeutet @emph{nicht}, dass die Terminal-Emulation nicht Standard-konform 
wäre.  Tatsächlich ist die Emulation des Kernels Linux sehr kompatibel zum
Standard @code{ANSI X3.64} (@code{ECMA-48}).  Aber es werden einige Teile 
weggelassen und andere Sachen hinzugefügt, wie zum Beispiel Tastatur-Codes.
Darum ist die Einstellung @code{linux} wirklich die richtige.

@end itemize

@subsection Erweiterungen

Die Terminal-Emulation von @command{avatarsay} unterstützt 
Erweiterungen, die weder in @code{ANSI X3.64} (@code{ECMA-48}) vorkommen,
noch von der Terminal-Emulation von Linux unterstützt werden.

Um diese Erweiterungen in eigenen Programmen zu verwenden, wird empfohlen, 
zunächst zu überprüfen, ob die Umgebungsvariable @code{AKFAVTTERM} gesetzt 
ist.

@table @code
@item CSI ? 56 h
schaltet den Modus für langsame Textausgabe an (veraltet: besser APC 
verwenden)

@item CSI ? 56 l
schaltet den Modus für langsame Textausgabe aus (veraltet: besser APC 
verwenden)

@item CSI 8 ; @var{Höhe} ; @var{Breite} t
ändert die Höhe und Breite der Sprechblase (Anzahl der Zeichen).
Der Wert 0 steht für das jeweilige Maximum.
(Dies ist tatsächlich kompatibel mit dem original @command{xterm})

@item APC @var{Befehl} ST
sendet einen Befehl an avatarsay. @xref{Anweisungen f@"ur avatarsay}.

@end table

@emph{Erläuterungen:}

@table @asis

@item @dfn{ESC} (Escape)
ist das Steuerzeichen @code{1Bhex}

@item @dfn{CSI} (Control Sequence Introducer)
kann entweder durch die Steuerzeichen @code{ESC} und @code{[} ausgelöst 
werden, oder in einigen Zeichensätzen durch das einzelne Steuerzeichen 
@code{9Bhex}.

@item @dfn{APC} (Application Program Command)
kann durch die Steuerzeichen @code{ESC} und @code{_} ausgelöst werden, 
oder in einigen Zeichensätzen durch das einzelne Steuerzeichen 
@code{9Fhex}.

@item @dfn{ST} (String Terminator)
kann durch die Steuerzeichen @code{ESC} und @code{\} ausgelöst werden, 
oder in einigen Zeichensätzen durch das einzelne Steuerzeichen 
@code{9Chex}.

@end table

Die Varianten mit @code{ESC} sind vorzuziehen. Insbesondere in UTF-8 
hat man durch die einzelnen Steuerzeichen keinen Vorteil, da diese auch
mit zwei Byte kodiert werden müssen.

@node Text-Betrachter
@section Einsatz von @command{avatarsay} als lustiger Text-Betrachter
@cindex Text-Betrachter
@cindex Betrachter
@cindex Lese-Software

Das Programm @command{avatarsay} kann als lustiger Text-Betrachter
verwendet werden.  Wenn man eine Text-Datei hat, sagen wir mal 
@file{MeinText}, dann kann man sie sich mit dem Befehl 
@samp{avatarsay MeinText} ansehen.  
Ausprobieren! Sofort! @t{@w{;-)}}

Das ist doch einfach, oder?  Wenn die Textdatei nicht richtig für das 
verwendete System kodiert ist, könnte man Probleme bei Zeichen bekommen 
haben, die in @code{@acronym{ASCII}} nicht vorkommen, wie die deutschen 
Umlaute (ä, ü, ü, ß).
Nun, es gibt wie gesagt verschiedene Kodierungen dafür.  Die am 
meisten verwendeten Kodierungen für deutsche Texte sind 
@code{ISO-8859-1} (auch bekannt als @code{Latin-1}) und @code{UTF-8}.
Wenn man also Probleme mit deutschen Umlauten oder anderen Zeichen
hat, kann man mal den Parameter @option{--encoding=UTF-8} oder
@option{--encoding=ISO-8859-1} ausprobieren --- 
Wie in diesem Beispiel: @samp{avatarsay --encoding=ISO-8859-1 MeinText}.

@cindex Trennlinie
@cindex Abtrennlinie
@cindex Reißkante
Nun, manchmal möchte man nicht, dass der Text in einem kontinuierlichen 
Textfluss dargestellt wird.  Man kann seinen Text deshalb mit Trennlinien
strukturieren.  Eine Trennlinie ist eine Zeile wie diese: @samp{---------}.  
Die Zeile muss in der aller ersten Spalte beginnen und sie muss mindestens 
drei aufeinander folgende Bindestriche (@code{U+002D}) umfassen.  Natürlich 
kann man auch mehr als drei benutzen.  Wenn @command{avatarsay} auf eine solche 
Trennlinie stößt, wartet es es eine Weile und fängt dann eine neue Seite an.


@node Den Text ausf@"uhrbar machen
@section Wie man seinen Text in ein Programm verwandelt
@cindex ausführbarer Text

Man muss nicht unbedingt immer den Befehl @command{avatarsay} von Hand
eingeben um seine Texte damit zu betrachten.  Man kann auch den Text 
selbst in ein ``Programm'' verwandeln.  Wie das funktioniert hängt vom 
verwendeten Betriebssystem ab.

@cindex #!
Auf einem @acronym{POSIX}-kompatiblen System, wie dem @acronym{GNU}-System
kann man eine spezielle Zeile an den Anfang der Datei einfügen.  Diese
Zeile sieht zum Beispiel so aus: @samp{#! /usr/local/avatarsay}.  
Natürlich sollte man darauf achten, dass man den richtigen Pfad angibt.
Dies muss die aller erste Zeile der Datei sein.  Man kann eine oder 
mehrere Leerzeilen nach dieser Zeile einfügen --- diese werden ignoriert.
Danach muss man das Ausführungs-Bit bei der Text-Datei setzen.  Das geht
folgendermaßen: @samp{chmod +x MeinText}.  Schon ist der Text selbst 
ausführbar.  Er akzeptiert fast alle Parameter, die auch 
@command{avatarsay} akzeptiert.

Auf Systemen wie Windows oder ReactOS funktioniert diese Zeile nicht ---
sie schadet aber auch nicht.  Auf diesen Systemen muss man einen anderen
Trick anwenden.  Man könnte die Datei so umbenennen, dass sie eine spezielle
Datei-Endung bekommt; zum Beispiel @file{.avt}.  Nun muss man sein System so
konfigurieren, dass die Datei-Endung @file{.avt} mit dem Programm 
@file{avatarsay.exe} verknüpft wird.  Dann kann man auf seinen Text 
doppelklicken und er wird ausgeführt.

@node Anderes Avatar-Bild
@section Wie man ein anderes Avatar-Bild verwendet
@cindex anderes Avatar-Bild
@cindex Avatar-Bild
@cindex Wechsel des Avatar-Bildes
@cindex Bild (Avatar)

Bisher haben wir immer ein und denselben Avatar gesehen. --- Nun, das ist 
nur der Vorgabe-Avatar.  Man kann ihn austauschen.

Es gibt verschiedene Methoden um den Avatar bei @command{avatarsay} 
auszutauschen:

Man kann es allgemein einstellen, dass der Aufruf von @command{avatarsay} 
immer den neuen Avatar verwendet.  Dies kann man entweder über eine 
Umgebungsvariable erreichen, oder indem man eine systemweite 
Konfigurationsdatei erstellt.

Nun, zuerst sollte man die Umgebungsvariable ausprobieren.  Das ist
einfach.  Die Variable heißt @env{AVATARIMAGE}.  Zum Beispiel mit der
@code{GNU bash} kann man die Variable folgendermaßen setzen:
@samp{export AVATARIMAGE=/usr/local/share/pixmaps/meinavatar.xpm}. 
@strong{Wichtig:} Man sollte immer den vollständigen Pfad angeben!

Wenn man eine Konfigurationsdatei verwenden will, erstellt man eine Datei mit 
dem Namen @file{/etc/avatarsay} und folgendem Inhalt:

@example
AVATARIMAGE=/usr/local/share/pixmaps/meinavatar.xpm
@end example

Oder man kann das Bild für den Avatar auf einer Text-für-Text Basis 
austauschen, indem man eine Anweisung in der Text-Datei verwendet.  Das wird in 
@ref{Anweisungen f@"ur avatarsay} näher erläutert.

Welche Bilddatei-Formate von AKFAvatar unterstützt werden, hängt davon
ab, welche Bibliotheken auf dem System installiert sind (@pxref{Formate}).

@subsection Transparenter Avatar Hintergrund
@cindex Transparenz (Avatar-Bild)

Das Avatar-Bild sollte natürlich einen transparenten Hintergrund haben.
Leider unterstützen viele Bild-Formate keine Transparenz.  Darum
verwendet AKFAvatar einen Trick.  Wenn das Avatar-Bild keine Transparenz
hat, dann wird der erste Farbwert im Bild genommen, das ist der Farbwert
in der oberen linken Ecke, und dieser Farbwert wird als transparent 
deklariert.  Wenn man ein Bild für die Verwendung als Avatar vorbereiten 
will, sollte man also darauf achten, dass die obere linke Ecke ``leer'' 
ist und man sollte darauf achten, eine Hintergrund-Farbe zu wählen, die 
in dem Teil des Bildes, der sichtbar sein soll, nicht vorkommt. Man 
muss außerdem darauf achten, dass der Hintergrund ``glatt'' ist und
nur einen einzigen Farbwert ohne jegliche Schattierungen erhält.
Wegen dieser Voraussetzung ist übrigens das @abbr{JPEG}-Format nicht
geeignet.  Man kann nämlich in diesem Format niemals einen wirklich
``glatten'' Hintergrund bekommen.

Man sollte also möglichst Bild-Formate verwenden, die Transparenz unterstützen.
AKFAvatar wird dann nicht in die Transparenz eingreifen.  Es ist jedoch zu 
beachten, dass der oben beschriebene Trick angewendet wird, wenn das Bild
keine Transparenz @emph{hat}, unabhängig davon, ob das Bildformat 
Transparenz unterstützen @emph{würde}.

@node Aufruf von avatarsay
@section Die genaue Verwendung von @command{avatarsay}

Das genaue Aufruf-Format für @command{avatarsay} ist:

@example
avatarsay [@var{Optionen}] [@var{Text-Dateien}]
avatarsay [@var{Optionen}] --execute @var{Programm} [@var{Programm-Optionen}]
@end example

@noindent
Wenn @var{Text-Dateien} nur ein @file{-} ist, dann liest das Programm von 
der Standard-Eingabe (@file{stdin}) und es läuft nicht in einer Schleife.

@need 800
Das Programm @command{avatarsay} unterstützt die folgenden Optionen:

@comment hier nicht @option verwenden
@table @code
@item --help
@itemx -h
zeige eine kurze Zusammenfassung der Aufruf-Optionen

@item --version
@itemx -v
zeige die Version des Befehls an

@item --terminal
@itemx -t
Terminal-Modus, dh. eine Shell in der Sprechblase ausführen

@item --execute
@itemx -x
@itemx -e
ein Programm in der Sprechblase ausführen

Es muss ein Programmname angegeben werden. Optionen hinter dem Programmnamen
gelten für das aufzurufende Programm.

@item --nocolor
@itemx -b
keine Farbe für auszuführende Programme und den Terminal-Modus

@item --window
@itemx -w
versuche das Programm in einem Fenster zu starten (Vorgabe)

@item --fullscreen
@itemx -f
versuche das Programm im Vollbild-Modus zu starten

@item --fullfullscreen
@itemx -F
wie @option{-f}, aber verwende die aktuelle Bildschirm-Auflösung

Diese Option ist auch nützlich, wenn es nur einen Vollbild-Modus gibt,
aber die Bildschirm-Auflösung nicht umgestellt werden kann; zum Beispiel
mit dem @code{VESA}-Framebuffer des Kernels Linux.

Diese Option wird erst ab SDL Version 1.2.10 oder neuer unterstützt.

@item --encoding=@var{Name}
die Eingabe-Daten sind in der Kodieriung @var{Name} kodiert

Welche Kodierungen unterstützt werden, hängt von der 
@code{iconv}-Implementierung des Systems ab.  Auf einigen Systemen kann man
eine Liste mit dem Befehl @code{iconv -l} bekommen.

@item --latin1
@itemx -l
die Eingabe-Daten sind in Latin-1 kodiert

@item --utf-8
@itemx --utf8
@itemx -u8
@itemx -u
die Eingabe-Daten sind in @code{UTF-8} kodiert

@item --once
@itemx -1
nur einmal ablaufen (keine Schleife)

@item --popup
@itemx -p
Popup, dh. bewege nicht den Avatar langsam ins Bild

Dies kann man für schnelle Popup-Texte verwenden. 
Um das Programm auch wieder schnell zu beenden, kann man die Anweisung
@command{[stop]} verwenden.

@item --no-delay
@itemx -n
keine Verzögerung bei der Textausgabe

@item --raw
@itemx -r
den rohen Text ausgeben (keine Anweisungen oder Trennlinien beachten)

@item --ignoreeof
@itemx -i
ignoriere Dateiende Situationen; dies sollte man verwenden, wenn die
Eingabe nicht von einer Datei stammt

@end table

@subsection Umgebungsvariablen

Der Befehl @command{avatarsay} unterstützt die folgenden Umgebungsvariablen:

@table @code

@item AVATARIMAGE
Bilddatei für den Avatar mit vollständigem Pfad

@item DATADIR
das Verzeichnis, in dem sich Bilder und Audio-Dateien befinden (hat keinen
Einfluss auf die Umgebungsvariable @code{AVATARIMAGE})

@item LC_ALL
@itemx LC_CTYPE
@itemx LANG
diese Variablen beeinflussen die Standard-Kodierung und die Sprache

@item SHELL
die bevorzugte Shell für den Terminal-Modus

@item HOME
das bevorzugte Startverzeichnis für den Terminal-Modus

@end table

@subsection Konfigurationsdatei
@cindex Konfigurationsdatei für avatarsay

Über eine Konfigurationsdatei namens @file{/etc/avatarsay} kann man ebenfalls
Werte für @code{AVATARIMAGE} und @code{DATADIR} festlegen.

Beispiel:
@example
AVATARIMAGE=/usr/local/share/pixmaps/meinavatar.xpm
AVATARDATADIR=/usr/local/share/akfavatar
@end example

Siehe auch @ref{Anderes Avatar-Bild}.

@node Anweisungen f@"ur avatarsay
@section Anweisungen für das Programm @command{avatarsay}
@cindex Anweisungen für avatarsay

Mit dem Programm @command{avatarsay} kann man auch einfache Demos erstellen,
ohne dafür eine Programmiersprache beherrschen zu müssen.

Eine Zeile, die mit einer Raute (@code{#}, @code{U+0023}) beginnt,
ist ein Kommentar.  Diese Zeilen werden von dem Programm einfach 
ignoriert.  @strong{Achtung:} Im Gegensatz zu anderen Skript-Sprachen
dürfen vor der Raute noch nicht mal Leerzeichen stehen.

Man kann seinen Text mit Trennlinien strukturieren.  Eine Trennlinie ist 
eine Zeile wie diese: @samp{---------}.  Die Zeile muss in der aller 
ersten Spalte beginnen und sie muss mindestens drei aufeinander folgende 
Bindestriche (@code{U+002D}) umfassen.  Natürlich kann man auch mehr als 
drei benutzen.

@need 1000
Eine @dfn{Anweisung} für ein @command{avatarsay}-Demo wird in eckige Klammern
geschrieben und muss in der aller ersten Spalte einer neuen Zeile anfangen.

@emph{Anmerkung:} Frühere Versionen von @command{avatarsay} verwendeten einen
anderen Schreibstil.

Die meisten dieser Anweisungen können auch über die Terminal-Emulation
angesprochen werden. Aus der Shell heraus kann der Befehl @command{avtcmd}
verwendet werden, um Anweisungen an das Programm avatarsay zu schicken.
Zum Beispiel so: @samp{avtcmd size 5, 40}. Man kann auch die Escpae-Sequenz
APC aus eigenen Programmen oder Skripten heraus verwenden.

@table @command

@item datadir @var{Verzeichnis}
mit dieser Anweisung kann man das Verzeichnis wechseln. Dies ist notwendig, 
um Bilder und Audio-Dateien zu laden.

Das Daten-Verzeichnis kann auch mit der Umgebungsvariablen
@env{AVATARDATADIR} eingestellt werden.  Diese Anweisung hat Vorrang
vor der Umgebungsvariablen.

@item avatarimage @var{Bild-Datei}
mit dieser Anweisung kann man ein anderes Bild für den Avatar festlegen

Man kann den Namen der Bild-Datei weglassen, um zum Vorgabe-Avatar
zurück zu wechseln. Bei Angabe von @code{info} wird ein kleines
Info-Symbol als Avatar verwendet. Die Angabe des Wertes @code{none}
entfernt den Avatar ganz. Dadurch erhält man die maximal mögliche Größe
für den Textbereich, aber es sieht halt langweilig aus.

@strong{Achtung}: Diese Anweisung sollte benutzt werden, bevor der eigentliche
Text anfängt.

Das Avatar-Bild kann auch mit der Umgebungsvariablen @env{AVATARIMAGE}
eingestellt werden.  Diese Anweisung hat Vorrang vor der Umgebungsvariablen.

Welche Bilddatei-Formate von AKFAvatar unterstützt werden, hängt davon
ab, welche Bibliotheken auf dem System installiert sind (@pxref{Formate}).

@item encoding @var{Kodierung}
nur für Demos: gibt die Kodierung des Textes an; 
zum Beispiel @samp{ISO-8859-1} oder @samp{UTF-8}

@strong{Achtung}: Diese Anweisung muss ziemlich am Anfang der Datei stehen.  
Man kann die Kodierung nicht mehr innerhalb des Textes verändern.
(Das war in früheren Versionen noch möglich.)

Diese Anweisung kann nur bei @code{ASCII}-kompatiblen Kodierungen verwendet
werden, wie zum Beispiel die @code{ISO-8859}-Familie oder @code{UTF-8}.
Die Kodierungen @code{UTF-16} (@code{UCS2}) und @code{UTF-32} (@code{UCS4})
können nicht auf diese Weise definiert werden.  Diese Kodierungen werden 
in der Regel jedoch automatisch erkannt.  (Ältere Versionen von 
@command{avatarsay} konnten mit diesen Kodierungen gar nicht umgehen.)

Welche Kodierungen unterstützt werden, hängt von der 
@code{iconv}-Implementierung des Systems ab.  Auf einigen Systemen kann man
eine Liste mit der Anweisung @code{iconv -l} bekommen.

@item title @var{Titel}
ändert den Titel des Fensters. Verwendet man die Anweisung ohne Angabe 
eines Titels, wird der Titel auf ``AKFAvatar'' zurück gesetzt.

@item scrolling off | on
schaltet das automatisch Text-Scrollen aus oder ein.

@item slow off | on
schaltet den Langsamschreibmodus aus oder ein.

@item backgroundcolor #@var{Farb-Definition}
ändert die Hintergrund-Farbe

Die @var{Farb-Definition} muss als sechs stellige Hexadezimalzahl
angegeben werden, mit jeweils zwei Ziffern für @code{rot}, 
@code{grün} und @code{blau}.  Der Vorgabe-Wert ist @samp{#E0D5C5}.

@strong{Achtung}: Diese Anweisung sollte benutzt werden, bevor der eigentliche
Text anfängt.

@item left-to-right
@itemx right-to-left
ändert die Text-Richtung; das ist nützlich, wenn man Text in hebräisch 
oder jiddisch hat (arabisch wird nicht unterstützt)

Man kann die Text-Richtung nur Zeile für Zeile ändern.  Verschiedene
Text-Richtungen innerhalb einer Zeile werden nicht unterstützt.

@item size @var{Höhe}, @var{Breite}
ändert die Größe der Sprechblase.

Man kann die Größe nicht über eine Maximalgröße hinaus festlegen.
Der Wert 0 setzt die jeweilige Maximalgröße. Ohne Angabe von Werten wird
die Sprechblase insgesamt auf die Maximalgröße gesetzt.

@item height @var{Höhe}
ändert die Höhe der Sprechblase.

Man kann die Größe nicht über eine Maximalgröße hinaus festlegen.
Der Wert 0 oder keine Angabe setzt die Maximalgröße.

@item width @var{Breite}
ändert die Breite der Sprechblase.

Man kann die Größe nicht über eine Maximalgröße hinaus festlegen.
Der Wert 0 oder keine Angabe setzt die Maximalgröße.

@item flip
umblättern; der selbe Effekt wie mit einer Trennlinie: kurz warten und dann
den Text-Bereich löschen

@item clear
löscht den Text-Bereich; im Gegensatz zu @command{flip} wird nicht erst
etwas gewartet, sondern der Text-Bereich wird sofort gelöscht 

@item move out | in
bewegt den Avatar aus dem Bild, bzw. wieder hinein

@item wait @var{Millisekunden}
wartet die angegebene Zeit, oder eine vorgegebene Zeit bei keiner Angabe

@item pause
eine längere Pause; wartet erst kurz, dann wird der Avatar einige Zeit
ohne Sprechblase angezeigt

@item image @var{Bild-Datei}
wartet einen Augenblick und zeigt dann ein Bild für einige Zeit ohne 
den Avatar

Das Bild wird auf dem Bildschirm zentriert.  Wenn das Bild größer als der
Bildschirm ist, wird der Bildschirm auf dem Bild zentriert.

Man kann eine Trennlinie @emph{nach} dieser Anwesung einfügen, wenn man will.
Die Trennlinie hat dann keine Auswirkung.

Welche Bilddatei-Formate von AKFAvatar unterstützt werden, hängt davon
ab, welche Bibliotheken auf dem System installiert sind (@pxref{Formate}).

@item rawaudiosettings @var{Samplingrate} @var{Kodierung} mono|stereo
Einstellungen für das Laden von rohen Audio-Dateien

Diese Anweisung wird benötigt um rohe Audio-Dateien abspielen zu können. 
Rohe Audio-Dateien beinhalten Audio-Daten ohne Einleitung oder ein
Container-Format. 
Die @var{Kodierung} kann einer der folgenden Bezeichner sein: @code{u8}, 
@code{s8}, @code{u16le}, @code{u16be}, @code{u16sys}, @code{s16le}, 
@code{s16be}, @code{s16sys}, @code{mu-law} | @code{u-law}, @code{A-law}. 
Zum Beispiel @code{u8} bedeutet @dfn{unsigned 8-Bit lineares PCM} oder 
@code{s16le} bedeutet @dfn{signed 16-Bit lineares PCM, little endian}.

Zum Beispiel: @samp{rawaudiosettings 16000 mu-law mono}

@item audio @var{Audio-Datei}
lädt eine Audio-Datei und spielt sie ab

Der Text wird weiterhin angezeigt. Auf diese Weise kann man eine Audio
Datei mit dem aufgenommenen Text abspielen, während gleichzeitig der 
Text auf dem Bildschirm erscheint.

Es werden @code{AU}-Dateien mit 8- oder 16-Bit linearem PCM oder µ-law oder
A-law Kodierung unterstützt.
Außerdem werden @code{WAV}-Dateien mit @code{PCM}- oder @code{ADPCM}-Kodierung 
unterstützt.
Nach Verwendung der Anweisung @command{rawaudiosettings} können auch rohe
Audio-Dateien abgespielt werden.

@item audioloop @var{Audio-Datei}
wie @command{audio}, aber die Audio-Datei wird in einer Endlosschleife
abgespielt

@item loadaudio @var{audiofile}
lädt eine Audio-Datei zum späteren Abspielen

Es kann nur eine Datei gleichzeitig geladen sein. Eine eventuell laufende 
Audio-Ausgabe wird durch diesen Befehl abgebrochen.

Es werden @code{AU}-Dateien mit 8- oder 16-Bit linearem PCM oder µ-law oder
A-law Kodierung unterstützt.
Außerdem werden @code{WAV}-Dateien mit @code{PCM}- oder @code{ADPCM}-Kodierung 
unterstützt.
Nach Verwendung der Anweisung @command{rawaudiosettings} können auch rohe
Audio-Dateien abgespielt werden.

@item playaudio
spielt eine Audio-Datei ab, die mit @command{loadaudio} geladen wurde

@item playaudioloop
spielt eine Audio-Datei, die mit @command{loadaudio} geladen wurde in einer
Endlosschleife ab

@item stopaudio
hält die Audio-Ausgabe umgehend an

@item waitaudio
warte bis die Audio-Ausgabe beendet ist; eine Schleife wird dabei 
abgeschlossen

Dies kann dafür verwendet werden, um den aufgenommenen Text mit dem
geschriebenen Text halbwegs zu synchronisieren.

@item effectpause
kurze Pause, während der Text sichtbar bleibt

@item back @var{Anzahl} @var{Text}
löscht die letzten @var{Anzahl} Zeichen und zeigt den @var{Text}

Man kann diese Anweisung nach der Anweisung @command{[effectpause]} verwenden
um einen schönen Effekt zu erzielen.

@item read
reserviert für spätere Versionen

@item credits @var{Text-Datei}
zeigt eine Text-Datei in Form eines Abspanns an

@item end
nur für Demos: beendet den Text

Der Avatar bewegt sich aus dem Bild. 

Alles nach der @command{end}-Anweisung wird ignoriert.

@item stop
nur für Demos: stoppt die Ausgabe sofort

Der Avatar wird nicht aus dem Bild bewegt, sondern die Textausgabe wird
sofort beendet.

Alles nach der @command{stop}-Anweisung wird ignoriert.

@end table

@node Pipes
@section Pipes
@cindex andere Befehle (avatarsay mit anderen Befehlen benutzen)

@cindex Pipes
Man muss nicht immer feststehende Texte schreiben um AKFAvatar zu benutzen.
Man kann den Befehl @command{avatarsay} auch dafür verwenden um sich die 
Ausgabe anderer Befehle anzeigen zu lassen.  Hierfür kann man einen einzelnen
Bindestrich (@option{-}, @code{U+002D}) als Option angeben.

Am besten versucht man das in eine Fenster-basierten Umgebung, wo man ein
Fenster für die Eingabe-Zeile hat und @command{avatarsay} in einem anderen
Fenster dargestellt wird.

Man kann zum Beispiel mal folgendes ausprobieren: @*
@samp{@w{echo "Hallo du. Wie geht's?" | avatarsay -}}.  Der Avatar erscheint 
und sagt diese Worte.  Man sollte aber vorsichtig mit der Verwendung von 
Ausrufungszeichen sein, einige Shells haben damit Probleme.

Man kann sich aber auch die Ausgabe von anderen Befehlen mit 
@command{avatarsay} ansehen.  Als Beispiel das: @samp{@w{df | avatarsay -}}, 
oder das: @samp{@w{dir | avatarsay -}}.  Man könnte sogar diese Anleitung auf
folgende Weise lesen: @*
@samp{@w{makeinfo --plaintext akfavatar-de.texinfo | avatarsay -}}, 
aber das ist wohl etwas zu langatmig.

@node Archiv-Dateien
@section Archiv-Dateien
@cindex Archiv-Dateien

Das Programm @command{avatarsay} kann auch spezielle Archiv-Dateien lesen.
Um eigene Archiv-Dateien zu erstellen, benötigt man zusätzliche Software.
Archiv-Dateien müssen im @dfn{AR}-Format vorliegen. Man kann zum Beispiel
den @command{ar}-Befehl aus den ``GNU Binutils'' verwenden. Aber Vorsicht:
es gibt einige zusätzliche Bedingungen und Einschränkungen.

Archiv-Dateien sollten die Datei-Endung @file{.avt} bekommen.

Das aller erste Datei-Mitglied muss das Skript für @command{avatarsay} sein 
und muss den Namen @file{AKFAvatar-demo} haben. Die wieteren Archiv-Mitglieder
können in beliebiger Reihenfolge angehängt werden. 

Die Namen der Archiv-Mitglieder ist auf 15 Zeichen beschränkt. GNU @command{ar}
und einige andere @command{ar}-Implementierungen haben Erweiterungen um längere
Namen zu unterstützen, aber @command{avatarsay} kann diese nicht lesen. Auf der 
anderen Seite denke ich, dass 15 Zeichen auch mehr als genug sind. Man beachte,
das Archiv-Mitglieder keine Datei-Erweiterungen benötigen, sie werden anhand 
des Inhaltes erkannt. Um sicher zu gehen, dass Dateinamen nicht mehr als 15
Zeichen enthalten, kann man bei GNU @command{ar} die Option @option{-f} 
verwenden, oder bei einigen anderen @command{ar}-Implementierungen die
Option @option{-T}. Das TARGA-Bildformat kann in Archiv-Dateien nicht 
verwendet werden.

Eine Archiv-Datei sollte ein Mitglied mit dem Namen @file{info} enthalten.
Auf diese Weise kann man Informationen über ein Archiv erhalten, indem man
@samp{ar p demo.avt info} eingibt. Dieses @file{info}-Mitglied kann das selbe
sein, das man auch für den Abspann verwendet.

Andere Programme können Archiv-Dateien für @command{avatarsay} an ihrem Anfang
erkennen. Sie fangen immer mit @code{!<arch>\nAKFAvatar} an, wobei @code{\n}
für ein einzelnes Zeichen mit dem Wert 10 steht.

@node Verwendung von gnome-akfavatar
@chapter Wie man es unter @acronym{GNOME} verwendet
@cindex GNOME

Dieses Kapitel erklärt die Verwendung des Skriptes 
@command{gnome-akfavatar}.  Es handelt sich dabei um eine einfache
Benutzeroberfläche für den Befehl @command{avatarsay}, bei der einige
Funktionen über ein Menü abrufbar sind.

@menu
* GNOME Voraussetzungen::  Was für @command{gnome-akfavatar} benötigt wird
* GNOME Hauptmen@"u::      Das Hauptmenü von @command{gnome-akfavatar}
@end menu

@node GNOME Voraussetzungen
@section Was für @command{gnome-akfavatar} benötigt wird
@cindex Voraussetzungen für @command{gnome-akfavatar}

Bei dem Befehl @command{gnome-akfavatar} handelt es sich um ein Shell-Skript,
er benötigt also eine Bourne-Shell.  Er wurde mit der @acronym{GNU} bash
getestet, aber jede andere @acronym{POSIX}-kompatible Bourne-Shell sollte
auch funktionieren.

Dann benötigt er das Programm @command{avatarsay}.  Das wird über den
@code{PATH} gesucht und im aktuellen Verzeichnis.

Für die sichtbare Oberfläche benutzt er das Programm @command{zenity}.
Als Text-Editor wird @command{gedit} benötigt und als Hilfe-Browser wird
@command{yelp} verwendet.  Diese Befehle müssen über den @code{PATH} 
abrufbar sein.  Das sind aber alles Programme, die zu @acronym{GNOME}
gehören, und somit schon vorinstalliert sein sollten.

Da der Befehl @command{avatarsay} auch im aktuellen Verzeichnis gesucht
wird, braucht das Paket nicht unbedingt installiert zu werden.  Aber
die Anleitung muss installiert sein, damit man sie aus 
@command{gnome-akfavatar} heraus aufrufen kann.

@node GNOME Hauptmen@"u
@section Das Hauptmenü von @command{gnome-akfavatar}
@cindex Menü von @command{gnome-akfavatar}
@cindex Hauptmenü von @command{gnome-akfavatar}

Wenn man @command{gnome-akfavatar} aufruft, bekommt man ein Menü, aus 
welchem man auswählen kann, was man damit tun will.

@noindent
Man bekommt die folgenden Menüpunkte:

@table @code
@item show a demo or textfile (ein Demo oder eine Text-Datei anzeigen)
Man bekommt eine Datei-Auswahl-Box mit der man eine Text-Datei oder ein
Demo auswählen kann, um sie mit @command{avatarsay} anzeigen zu lassen.
Ein @dfn{Demo} ist entweder eine Text-Datei, die Anweisungen für 
@command{avatarsay} enthält (@pxref{Anweisungen f@"ur avatarsay}),
oder ein Paket, dass auch Bilder und Audio-Dateien enthalten kann. 

@item create or edit a demo (ein Demo erstellen oder bearbeiten)
kann dafür verwendet werden, um ein neues Demo zu erstellen, oder um ein
bestehendes zu bearbeiten.  Wenn man einen Dateinamen angibt, der noch nicht
existiert, wird die Datei mit einer geeigneten @code{#!}-Zeile angelegt.
Wenn man ein anderes Avatar-Bild eingestellt hat bevor man diesen Menüpunkt
verwendet hat, wird auch eine passende @command{[avatarimage]}-Anweisung mit
eingefügt.  Das Ausführungs-Bit wird bei der erstellten Datei gesetzt.
Anmerkung: Das alles wird nur für @emph{neu angelegte} Dateien gemacht, 
nicht für Dateien, die vorher schon existiert haben.

@item show a manpage (eine Manpage anzeigen)
man wird gefragt, welche Manage man betrachten will.  Wenn man eine Manpage
aus einem bestimmten Abschnitt ansehen will, kann man die Abschnitt-Nummer
vor dem Namen der Manpage, getrennt durch ein Leerzeichen, angeben.
Zum Beispiel @samp{6 intro} zeigt die Einleitung zu Abschnitt 6.

@item show the output of a command (zeige die Ausgabe eines Befehls)
zeigt die Ausgabe eines Befehls in @command{avatarsay}.  Das ist nur
für Befehle geeignet, die etwas über die Standard-Ausgabe oder der 
Standard-Fehlerausgabe ausgeben.  Es ist nicht für interaktive Programme
geeignet, oder für Programme, die curses verwenden.

@item change avatar image (ändere das Avatar-Bild)
lässt einen das Avatar-Bild verändern.  Siehe auch @ref{Anderes Avatar-Bild}.
Diese Einstellung gilt erstmal nur für die aktuelle Sitzung, es sei denn,
man verwendet den Menüpunkt @dfn{save settings}.

@item fullscreen or window mode (Vollbild- oder Fenster-Modus)
wenn man auf @code{Okay} klickt, wird der Vollbild-Modus aktiviert,
wenn man auf @code{Cancel}/@code{Abbrechen} klickt, wird der 
Fenster-Modus ausgewählt.
Diese Einstellung gilt erstmal nur für die aktuelle Sitzung, es sei denn,
man verwendet den Menüpunkt @dfn{save settings}.

@item save settings (speichere Einstellungen)
speichert die Einstellungen, also das Avatar-Bild und ob es im Volbild-Modus
oder im Fenster-Modus läuft.  Anmerkung: diese Einstellungen gelten nur für
@command{gnome-akfavatar}; sie haben keine Auswirkung wenn man 
@command{avatarsay} direkt aufruft, oder auf andere Programme, die die 
AKFAvatar-Bibliothek verwenden.

@item help for AKFAvatar (Hilfe für AKFAvatar)
zeigt die Onlinehilfe für AKFAvatar mit dem Hilfe-Zentrum von 
@acronym{GNOME} an.

@item Website
öffnet die Homepage von AKFAvatar in einem Web-Browser

@item Exit (beenden)
beendet das Programm. 
Anmerkung: Man kann das Programm auch beenden, indem man auf @code{Abbrechen} 
klickt oder auf den @code{Schließen}-Knopf des Fensters, oder indem man die 
@key{Esc}-Taste drückt.

@end table

@node Formate
@chapter Dateiformate und andere Angaben

@section Farben
@cindex Farben

Eine Möglichkeit eine Farbe anzugeben ist, indem man einen englischen Namen
dafür angibt. Namen mit einem Leerzeichen dazwischen können nicht immer 
angegeben werden. Aber man kann diese Namen dann auch zusammenschreiben, als
einzelnes Wort. Einen Überblick über die möglichen Farbnamen findet man unter 
@ref{Farbnamen}.

Eine andere Möglichkeit ist es, die RGB-Werte in hexadezimaler Darstellung 
anzugeben, eingeleitet durch das Gatter-Zeichen (@code{#}).  Man kann einen 
Wert mit 6 oder 3 Stellen angeben.  Zum Beispiel für intensives rot kann man 
entweder @code{#f00} angeben, oder @code{#ff0000}.  Der erste Wert (ein oder
zwei Ziffern) steht für rot, der zweite für grün und der dritte für blau. 
Mit diesen Werten kann man jede beliebige Farbe zusammen mischen. Ein paar 
weitere Beispiele: schwarz ist @code{#000}, weiß ist @code{#fff}, 
gelb ist @code{#ff0}, violett ist @code{#f0f} und so weiter.  Für dunklere
Farben wählt man einfach kleinere Werte: @code{#808} ist ein dunkles violett, 
während @code{#fdf} ein sehr helles violett ist.

@section Bilder
@cindex Bilder

AKFAvatar unterstützt Bilder im @abbr{XPM}-Format und im unkomprimierten 
@abbr{BMP-}Format ohne weitere Zusatz-Bibliotheken.
Das @abbr{XPM}-Format eignet sich besser für Avatar-Bilder, da es Transparez 
unterstützt.  Für andere Formate muss die Software auf einen schmutzigen Trick
ausweichen, um eine Art Pseudo-Transparenz zu erreichen
(@pxref{Anderes Avatar-Bild}).
@abbr{XPM} eignet sich vor allem auch viel besser für Programmierer, da 
diese Dateien recht einfach in Code eingefügt werden können, insbesondere in 
Code von C-kompatiblen Sprachen.  Es gibt jedoch auch einen Nachteil: 
@abbr{XPM}-Dateien mit sehr vielen Farben können ziemlich groß werden.
Man sollte dabei also möglichst nur wenige Farben verwenden.  Es gibt jedoch
keine künstliche Begrenzung.

Wenn man @code{SDL_image} installiert hat, kann man auch einige andere Formate
verwenden, inklusive @abbr{PNG} und @abbr{JPEG}, falls man auch dafür die
nötigen Bibliotheken installiert hat.  Man sollte jedoch beachten, dass sich 
@abbr{JPEG} nicht für Avatar-Bilder eignet (der oben erwähnte 
``schmutzige Trick'' funktioniert mit @abbr{JPEG} nicht vernünftig).

Sowohl das @abbr{XPM}-Format, als auch das @abbr{BMP}-Format sind
unkomprimiert.  Bilder in diesen Formaten belegen also einiges an Platz auf
der Festplatte.  Allerdings sollte Festplattenplatz heutzutage kein so großes
Problem mehr sein.
Man beachte außerdem: Wenn man diese Dateien in komprimierte Archiv-Dateien
zum Weiterverteilen packt, dann macht das überhaupt nichts aus.  Dann werden 
sie ja komprimiert, während Dateien, die vorher schon komprimiert waren, sich
kaum weiter komprimieren lassen.  Das gleicht sich gegenseitig aus.
(Lediglich das @abbr{JPEG}-Format hat hierbei einen Vorteil, da es ein 
verlustbehaftetes Format ist.)

@node Programmierung
@chapter Programmierung mit AKFAvatar
@cindex Programmierung

Wenn man anfangen will programmieren zu lernen, ist Pascal eine sehr gute Wahl
als Einstiegssprache.  Leider ist Pascal jedoch nicht sehr weit verbreitet.
Dennoch haben wir mit @uref{http://www.gnu-pascal.de/, GNU-Pascal} und 
@uref{http://www.freepascal.org/, Free Pascal} zwei sehr gute Freie Software
Implementierungen zur Verfügung, die auf vielen verschiedenen Plattformen 
einsetzbar sind.

Es wäre durchaus auch möglich gewesen, das Ganze komplett in Pascal zu 
schreiben.  Aber C ist viel weiter verbreitet und das hat seine Konsequenzen.
Jedes moderne System bringt in der Regel bereits einen C-Compiler mit und 
fast jede andere Programmiersprache kann Bibliotheken, die in C geschrieben 
wurden verwenden.

@menu
* Pascal::           Wie man den Avatar in Pascal programmiert
@end menu

@node Pascal
@section Wie man den Avatar in Pascal programmiert
@cindex Pascal

Man kann AKFAvatar für Pascal-Programme verwenden.

Zunächst einmal muss die Bibliothek bereits auf dem System installiert sein.
Man benötigt außerdem die Datei @file{akfavatar.pas}.  Die Datei wird
normalerweise nicht automatisch installiert, da es kein Standard-Verzeichnis
dafür gibt.  Wenn sie sich aber im aktuellen Verzeichnis befindet, wird sie
dennoch gefunden.

@subsection Einfache Anwendungs-Fälle

In dem Paket mit den Quelltexten findet man unter anderem die Skripte 
@file{gpcavatar} und @file{fpcavatar} im Unterverzeichnis @file{pascal/}.
Wenn man zum Beispiel @acronym{GNU}-Pascal (@command{gpc}) hat, kann man
folgendes eingeben: @samp{./gpcavatar example.pas}
Damit sollte das Programm @file{example} kompiliert werden.

Auf diese Weise kann man jedes Pascal-Programm, das nur die 
Standard-Eingabe/Ausgabe verwendet kompilieren.  Es sind keine Änderungen am
Quelltext des Pascal-Programmes nötig!

Wenn man eine neue Seiten anfangen will, kann man einfach den Befehl 
@command{page;} verwenden.

Na? Das ist doch einfach, oder?

@display
@emph{Hinweis:} Wenn das Programm die Unit @code{CRT} verwendet, muss man 
Äanderngen am Quelltext vornehmen. Das wird weiter unten beschrieben.
@end display

@subsection Installation

Erstmal sollte man sich die Skripte @file{gpcavatar} und @file{fpcavatar} 
ansehen.  Am Anfang dieser Skripte befinden sich einige Variablen, die man
an seine Bedürfnisse anpassen sollte.  Dann kann man die Skripte nach 
@file{/usr/local/bin} kopieren, so dass man sie von überall her aufrufen kann.
Die Datei @file{akfavatar.pas} sollte man dahin kopieren, wo man seine
persönlichen Units haben möchte.  Man sollte sicher stellen, dass dieses
Verzeichnis auch in den Skripten mit aufgelistet ist.

@subsection Verwendung für Fortgeschrittene

Es ist auch möglich Programme mit AKFAvatar zu verwenden, die auf der Unit 
@code{CRT} basieren.  Dafür sind aber Veränderungen am Programm notwendig.

Die Skripte @file{gpcavatar} und @file{fpcavatar} definieren beide das Symbol
@code{AKFAVATAR}, so dass man @code{@{$IfDef AKFAVATAR@}} oder 
@code{@{$IfNDef AKFAVATAR@}} verwenden kann, um zu kontrollieren, was passiert, 
wenn man es mit oder ohne AKFAvatar kompiliert.

Um sicher zu stellen, dass das Programm immer noch mit der Unit @code{CRT} 
funktioniert, kann man folgendes verwenden: 
@samp{@{$IfNDef AKFAVATAR@} uses CRT; @{$EndIf@}}.  Das Programm 
@file{multiply.pas} ist ein Beispiel für diese Methode.

AKFAvatar unterstützt die meisten Befehle und Variablen wie die originale
@code{CRT} Unit.  Zum Beispiel der Befehl @command{ClrScr} löscht den 
Text-Bereich (nicht den ganzen Bildschirm!), @command{ClrEol} löscht den
Rest der Zeile.  Man kann den Befehl @command{GotoXY(@var{x}, @var{y});}
verwenden um an eine bestimmte Stelle innerhalb des Text-Bereiches zu 
springen.  Die Funktionen @command{WhereX} und @command{WhereY} geben
Auskunft über die aktuelle Position.

@display
@strong{Achtung:} Die Breite der Anzeige umfasst 80 Zeichen wie bei einem
Text-Terminal, aber die Höhe ist meist wesentlich geringer.  Man kann die 
Dimensionen des Text-Bereiches über die Funktion @code{ScreenSize.x} 
und @code{ScreenSize.y} herausfinden.  Der Avatar wird nun angezeigt, wenn
er vorher noch nicht sichtbar war.  Wenn man also ein anderes Avatar-Bild oder
eine andere Hintergrundfarbe einstellen will, muss man das vor der Abfrage
der Größe tun.
@end display

Man kann den Befehl @command{TextColor(@var{color});} verwenden, um die
Text-Farbe zu verändern.  Man kann sogar die Hintergrund-Farbe des Textes
mit dem Befehl @command{TextBackground(@var{color});} verändern.  Aber
das sieht nicht so gut aus wie auf einem Text-Terminal.

Sogar die Variable @code{TextAttr} wird vollständig unterstützt wie
in der originalen @code{CRT}-Unit.  Aber diese Variable sollte nach Möglichkeit 
vermieden werden.

Die Befehle @command{HighVideo} und @command{LowVideo} werden unterstützt,
aber etwas anders, als in der @code{CRT}-Unit.  @command{HighVideo} schaltet
den Fettduck ein und @command{LowVideo} schaltet den Fettdruck wieder aus.
Diese Befehle verändern nicht die Farbe, wie dies in der @code{CRT}-Unit
geschieht. Das sollte man im Hinterkopf behalten, wenn man diese Befehle mit
Aufrufen von @command{TextColor} kombiniert.

Mit @command{Underlined(true);} kann man den Unterstreichen-Modus anschalten
und mit @command{Underlined(false);} wieder abschalten.

Um zurück auf die ``normale'' Text-Darstellung zu schalten, sollte man den
Befehl @command{NormVideo;} verwenden.  Die ``normale'' Text-Farbe ist
bei AKFAvatar eine ganz andere als mit der @code{CRT}-Unit.  Durch
Verwendung dieses Befehles kann man also sicher gehen, dass man mit
beidem ein vernünftiges Ergebnis bekommt. @command{NormVideo;} schaltet
auch den Fettdruck und das Unterstreichen aus.

Die Funktion @command{ReadKey} wartet auf einen Tastendruck und gibt den
Code der gedrückten Taste wieder.  Um heraus zu finden ob eine Taste gedrückt
wurde ohne das Programm zu blockieren, kann man die Funktion 
@command{KeyPressed} verwenden.

@display
@strong{Achtung:} 
Funktionstasten werden noch nicht unterstützt.  Die Taste @key{Esc} 
beendet das Programm.  Wenn man die @key{Esc}-Taste für etwas anderes
benötigt, kann man die Variable @code{CheckEsc} auf @code{false} setzen.
Das Programm wird auch beendet, wenn @key{Strg}+@key{C} gedrückt wird.
Um das zu verhindern, kann man die Variable @code{CheckBreak} auf
@code{false} setzen.  Die Variable @code{CheckBreak} ist kompatibel
zur @code{CRT}-Unit, während @code{CheckEsc} eine Erweiterung ist.
@end display

Es gibt noch eine Menge zusätzlicher Befehle, die nicht kompatibel zur
@code{CRT}-Unit sind.

Mit dem folgenden Befehl kann man ein anderes Bild für den Avatar einstellen:
@verbatim
{$IfDef AKFAVATAR}
  AvatarImageFile ('/usr/local/share/pixmaps/teacher.xpm');
{$EndIf}
@end verbatim
@noindent
Das ist natürlich nur ein Beispiel.
Dieser Befehl muss verwendet werden, bevor irgendeine Ausgabe oder Eingabe 
stattfindet!  Die Größe des Avatar-Bildes hat auch Einfluss auf die Größe des
Text-Bereiches.  Darum muss der Befehl auch verwendet werden, bevor man die
Funktion @command{ScreenSize} verwendet.

Wenn man die Hintergrund-Farbe des Fensters (also nicht des Text-Bereiches) 
verändern will, kann man den Befehl @command{setBackgroundColor(@var{rot}, 
@var{grün}, @var{blau});} am Anfang des Programmes verwenden.  Die Werte
für rot, grün und blau repräsentieren die Farbintensität dieses Farbanteils.
Man kann jede darstellbare Farbe mit diesen drei Werten zusammen mischen.
Der Maximalwert beträgt 255 ($FF).  Zum Beispiel
@samp{setBackgroundColor(0, 0, 100);} stellt einen dunkel-blauen Hintergrund
ein.

Man kann in seinem Programm festlegen welche Zeichensatz-Kodierung man
verwendet.  Wenn man noch ein altes System hat, das auf dem Latin-1 
Zeichensatz basiert, kann man den Befehl 
@code{@w{setEncoding ('ISO-8859-1');}} einsetzen.  Falls man mit mehreren
Zeichensätzen gleichzeitig hantieren muss, kann man den Befehl auch 
mehrfach verwenden.  Unterschiedliche Zeichensätze können im Text-Bereich
gleichzeitig dargestellt werden.  (Intern wird ein Unicode-Zeichensatz
verwendet.)

Es gibt auch Zeichen für hebräische oder jiddische Texte.  Um diese
zu verwenden muss man die Text-Richtung ändern.  Dass kann man mit
den Befehlen @code{@w{setTextDirection (RightToLeft);}} und  
@code{@w{setTextDirection (LeftToRight);}} tun.  Man sollte aber
darauf achten, dass man vor oder nach Verwendung dieser Befehle eine
neue Zeile oder eine neue Seite anfängt.  Unterschiedliche 
Text-Richtungen innerhalb einer Zeile zu verwenden wird nicht 
unterstützt.

Die Eingabe und Ausgabe wird über die üblichen Pascal-Befehle gehandhabt
(Read, ReadLn, Write, WriteLn, Page).  Man kann die vollständige Pascal
Syntax für diese Befehle ausnutzen.  Zum Beispiel:
@samp{@w{WriteLn ('Pi ist ', Pi:0:8, ' und so weiter.');}}

Wenn man einen Seitenumbruch auslösen will, kann man den Befehl 
@command{page;} verwenden.  Tatsächlich handelt es sich dabei auch um
einen Befehl aus Standard-Pascal, der aber selten benutzt wird; so
selten, dass er in Free Pascal sogar ganz weggelassen wurde.  Aber meine
Unit definiert ihn auch für Free Pascal.  Normalerweise wird 
@command{page;} dafür verwendet um eine neue Seite bei einem Drucker 
anzufordern.

Man kann den Text-Bereich auch mit dem Befehl @command{ClrScr;} löschen.
Im Gegensatz zu @command{page;} wartet der Befehl @command{ClrScr;} nicht
erst, sondern löscht den Text-Bereich sofort.  Man kann den Cursor mit dem
Befehl @code{@w{GotoXY (x, y);}} an jede beliebige Stelle bewegen.  Man 
kann die Position des Cursors mit den Funktionen @command{WhereX} und
@command{WhereY} heraus finden.  Die Koordinaten 1, 1 bezeichnen die
obere linke Ecke (unabhängig von der Text-Richtung).  Man kann die
Maximalwerte mit @code{ScreenSize.x} und @code{ScreenSize.y} heraus
finden.  All diese Namen wurden gewählt, um eine gewisse Kompatibilität
zur @code{CRT}-Unit zu bekommen.  Ungeachtet ihrer Bezeichnungen 
verwalten sie nicht den Bildschirm, sondern nur den Text-Bereich.

Wenn man Warnungen Fehlermeldungen oder Debug-Informationen ausgeben will
sollte man @code{stderr} verwenden. (Das funktioniert nicht unter Windows
oder ReactOS)  
Zum Beispiel: @samp{WriteLn (stderr, 'Error: ', AvatarGetError);}
Nun, die Funktion @command{AvatarGetError} holt eine Fehlermeldung von
der Bibliothek ein.

Der Befehl @command{ShowAvatar;} zeigt nur den Avatar ohne die Sprechblase.
Die Befehle @command{MoveAvatarIn;} oder @command{MoveAvatarOut;} bewegen
den Avatar heraus beziehungsweise herein.  Der Befehl
@code{@w{Delay (500);}} wartet ungefähr 500 Millisekunden.  Falls man eine
Angabe in Sekunden bevorzugt, kann man folgendes verwenden:
@code{@w{Delay (seconds(0.5));}}.

Eine vollständige Übersicht über alle Pascal-Befehle und Funktionen findet
man in @ref{Pascal Referenz}.

@node Pascal Referenz
@appendix Pascal Referenz
@cindex Pascal Referenz
@cindex Referenz für Pascal

Der folgende Text zeigt das @code{interface} der Pascal-Unit
@code{akfavatar.pas}:

@verbatiminclude pasref.txt

@node C Referenz
@appendix C Referenz
@cindex Referenz für C

Es folgt der Inhalt der C Header Datei @code{akfavatar.h}:

@verbatiminclude akfavatar.h

@node Farbnamen
@appendix Namen der Farben
@cindex Farbnamen
@cindex Namen für Farben

Bei Farbnamen ist die Groß- und Kleinschreibung beliebig. Namen mit einem 
Leerzeichen dazwischen können nicht immer verwendet werden. Diese Namen können
aber immer zu einem Wort zusammengeschrieben werden.

Andere Möglichkeiten Farben anzugeben werden in @ref{Formate} erläutert.

Die folgenden Namen für Farben werden unterstützt:

snow, ghost white, GhostWhite, white smoke, WhiteSmoke, gainsboro,
floral white, FloralWhite, old lace, OldLace, linen, antique white,
AntiqueWhite, papaya whip, PapayaWhip, blanched almond, BlanchedAlmond,
bisque, peach puff, PeachPuff, navajo white, NavajoWhite, moccasin,
cornsilk, ivory, lemon chiffon, LemonChiffon, seashell, honeydew, mint
cream, MintCream, azure, alice blue, AliceBlue, lavender, lavender blush,
LavenderBlush, misty rose, MistyRose, white, black, dark slate gray,
DarkSlateGray, dark slate grey, DarkSlateGrey, dim gray, DimGray, dim
grey, DimGrey, slate gray, SlateGray, slate grey, SlateGrey, light slate
gray, LightSlateGray, light slate grey, LightSlateGrey, gray, grey, light
grey, LightGrey, light gray, LightGray, midnight blue, MidnightBlue, navy,
navy blue, NavyBlue, cornflower blue, CornflowerBlue, dark slate blue,
DarkSlateBlue, slate blue, SlateBlue, medium slate blue, MediumSlateBlue,
light slate blue, LightSlateBlue, medium blue, MediumBlue, royal blue,
RoyalBlue, blue, dodger blue, DodgerBlue, deep sky blue, DeepSkyBlue,
sky blue, SkyBlue, light sky blue, LightSkyBlue, steel blue, SteelBlue,
light steel blue, LightSteelBlue, light blue, LightBlue, powder blue,
PowderBlue, pale turquoise, PaleTurquoise, dark turquoise, DarkTurquoise,
medium turquoise, MediumTurquoise, turquoise, cyan, light cyan,
LightCyan, cadet blue, CadetBlue, medium aquamarine, MediumAquamarine,
aquamarine, dark green, DarkGreen, dark olive green, DarkOliveGreen,
dark sea green, DarkSeaGreen, sea green, SeaGreen, medium sea green,
MediumSeaGreen, light sea green, LightSeaGreen, pale green, PaleGreen,
spring green, SpringGreen, lawn green, LawnGreen, green, chartreuse,
medium spring green, MediumSpringGreen, green yellow, GreenYellow, lime
green, LimeGreen, yellow green, YellowGreen, forest green, ForestGreen,
olive drab, OliveDrab, dark khaki, DarkKhaki, khaki, pale goldenrod,
PaleGoldenrod, light goldenrod yellow, LightGoldenrodYellow, light
yellow, LightYellow, yellow, gold, light goldenrod, LightGoldenrod,
goldenrod, dark goldenrod, DarkGoldenrod, rosy brown, RosyBrown, indian
red, IndianRed, saddle brown, SaddleBrown, sienna, peru, burlywood,
beige, wheat, sandy brown, SandyBrown, tan, chocolate, firebrick, brown,
dark salmon, DarkSalmon, salmon, light salmon, LightSalmon, orange, dark
orange, DarkOrange, coral, light coral, LightCoral, tomato, orange red,
OrangeRed, red, hot pink, HotPink, deep pink, DeepPink, pink, light pink,
LightPink, pale violet red, PaleVioletRed, maroon, medium violet red,
MediumVioletRed, violet red, VioletRed, magenta, violet, plum, orchid,
medium orchid, MediumOrchid, dark orchid, DarkOrchid, dark violet,
DarkViolet, blue violet, BlueViolet, purple, medium purple, MediumPurple,
thistle, snow1, snow2, snow3, snow4, seashell1, seashell2, seashell3,
seashell4, AntiqueWhite1, AntiqueWhite2, AntiqueWhite3, AntiqueWhite4,
bisque1, bisque2, bisque3, bisque4, PeachPuff1, PeachPuff2, PeachPuff3,
PeachPuff4, NavajoWhite1, NavajoWhite2, NavajoWhite3, NavajoWhite4,
LemonChiffon1, LemonChiffon2, LemonChiffon3, LemonChiffon4,
cornsilk1, cornsilk2, cornsilk3, cornsilk4, ivory1, ivory2, ivory3,
ivory4, honeydew1, honeydew2, honeydew3, honeydew4, LavenderBlush1,
LavenderBlush2, LavenderBlush3, LavenderBlush4, MistyRose1, MistyRose2,
MistyRose3, MistyRose4, azure1, azure2, azure3, azure4, SlateBlue1,
SlateBlue2, SlateBlue3, SlateBlue4, RoyalBlue1, RoyalBlue2, RoyalBlue3,
RoyalBlue4, blue1, blue2, blue3, blue4, DodgerBlue1, DodgerBlue2,
DodgerBlue3, DodgerBlue4, SteelBlue1, SteelBlue2, SteelBlue3, SteelBlue4,
DeepSkyBlue1, DeepSkyBlue2, DeepSkyBlue3, DeepSkyBlue4, SkyBlue1,
SkyBlue2, SkyBlue3, SkyBlue4, LightSkyBlue1, LightSkyBlue2, LightSkyBlue3,
LightSkyBlue4, SlateGray1, SlateGray2, SlateGray3, SlateGray4,
LightSteelBlue1, LightSteelBlue2, LightSteelBlue3, LightSteelBlue4,
LightBlue1, LightBlue2, LightBlue3, LightBlue4, LightCyan1, LightCyan2,
LightCyan3, LightCyan4, PaleTurquoise1, PaleTurquoise2, PaleTurquoise3,
PaleTurquoise4, CadetBlue1, CadetBlue2, CadetBlue3, CadetBlue4,
turquoise1, turquoise2, turquoise3, turquoise4, cyan1, cyan2, cyan3,
cyan4, DarkSlateGray1, DarkSlateGray2, DarkSlateGray3, DarkSlateGray4,
aquamarine1, aquamarine2, aquamarine3, aquamarine4, DarkSeaGreen1,
DarkSeaGreen2, DarkSeaGreen3, DarkSeaGreen4, SeaGreen1, SeaGreen2,
SeaGreen3, SeaGreen4, PaleGreen1, PaleGreen2, PaleGreen3, PaleGreen4,
SpringGreen1, SpringGreen2, SpringGreen3, SpringGreen4, green1, green2,
green3, green4, chartreuse1, chartreuse2, chartreuse3, chartreuse4,
OliveDrab1, OliveDrab2, OliveDrab3, OliveDrab4, DarkOliveGreen1,
DarkOliveGreen2, DarkOliveGreen3, DarkOliveGreen4, khaki1, khaki2,
khaki3, khaki4, LightGoldenrod1, LightGoldenrod2, LightGoldenrod3,
LightGoldenrod4, LightYellow1, LightYellow2, LightYellow3, LightYellow4,
yellow1, yellow2, yellow3, yellow4, gold1, gold2, gold3, gold4,
goldenrod1, goldenrod2, goldenrod3, goldenrod4, DarkGoldenrod1,
DarkGoldenrod2, DarkGoldenrod3, DarkGoldenrod4, RosyBrown1, RosyBrown2,
RosyBrown3, RosyBrown4, IndianRed1, IndianRed2, IndianRed3, IndianRed4,
sienna1, sienna2, sienna3, sienna4, burlywood1, burlywood2, burlywood3,
burlywood4, wheat1, wheat2, wheat3, wheat4, tan1, tan2, tan3, tan4,
chocolate1, chocolate2, chocolate3, chocolate4, firebrick1, firebrick2,
firebrick3, firebrick4, brown1, brown2, brown3, brown4, salmon1, salmon2,
salmon3, salmon4, LightSalmon1, LightSalmon2, LightSalmon3, LightSalmon4,
orange1, orange2, orange3, orange4, DarkOrange1, DarkOrange2, DarkOrange3,
DarkOrange4, coral1, coral2, coral3, coral4, tomato1, tomato2, tomato3,
tomato4, OrangeRed1, OrangeRed2, OrangeRed3, OrangeRed4, red1, red2, red3,
red4, DebianRed, DeepPink1, DeepPink2, DeepPink3, DeepPink4, HotPink1,
HotPink2, HotPink3, HotPink4, pink1, pink2, pink3, pink4, LightPink1,
LightPink2, LightPink3, LightPink4, PaleVioletRed1, PaleVioletRed2,
PaleVioletRed3, PaleVioletRed4, maroon1, maroon2, maroon3, maroon4,
VioletRed1, VioletRed2, VioletRed3, VioletRed4, magenta1, magenta2,
magenta3, magenta4, orchid1, orchid2, orchid3, orchid4, plum1,
plum2, plum3, plum4, MediumOrchid1, MediumOrchid2, MediumOrchid3,
MediumOrchid4, DarkOrchid1, DarkOrchid2, DarkOrchid3, DarkOrchid4,
purple1, purple2, purple3, purple4, MediumPurple1, MediumPurple2,
MediumPurple3, MediumPurple4, thistle1, thistle2, thistle3, thistle4,
gray0, grey0, gray1, grey1, gray2, grey2, gray3, grey3, gray4, grey4,
gray5, grey5, gray6, grey6, gray7, grey7, gray8, grey8, gray9, grey9,
gray10, grey10, gray11, grey11, gray12, grey12, gray13, grey13, gray14,
grey14, gray15, grey15, gray16, grey16, gray17, grey17, gray18, grey18,
gray19, grey19, gray20, grey20, gray21, grey21, gray22, grey22, gray23,
grey23, gray24, grey24, gray25, grey25, gray26, grey26, gray27, grey27,
gray28, grey28, gray29, grey29, gray30, grey30, gray31, grey31, gray32,
grey32, gray33, grey33, gray34, grey34, gray35, grey35, gray36, grey36,
gray37, grey37, gray38, grey38, gray39, grey39, gray40, grey40, gray41,
grey41, gray42, grey42, gray43, grey43, gray44, grey44, gray45, grey45,
gray46, grey46, gray47, grey47, gray48, grey48, gray49, grey49, gray50,
grey50, gray51, grey51, gray52, grey52, gray53, grey53, gray54, grey54,
gray55, grey55, gray56, grey56, gray57, grey57, gray58, grey58, gray59,
grey59, gray60, grey60, gray61, grey61, gray62, grey62, gray63, grey63,
gray64, grey64, gray65, grey65, gray66, grey66, gray67, grey67, gray68,
grey68, gray69, grey69, gray70, grey70, gray71, grey71, gray72, grey72,
gray73, grey73, gray74, grey74, gray75, grey75, gray76, grey76, gray77,
grey77, gray78, grey78, gray79, grey79, gray80, grey80, gray81, grey81,
gray82, grey82, gray83, grey83, gray84, grey84, gray85, grey85, gray86,
grey86, gray87, grey87, gray88, grey88, gray89, grey89, gray90, grey90,
gray91, grey91, gray92, grey92, gray93, grey93, gray94, grey94, gray95,
grey95, gray96, grey96, gray97, grey97, gray98, grey98, gray99, grey99,
gray100, grey100, dark grey, DarkGrey, dark gray, DarkGray, dark blue,
DarkBlue, dark cyan, DarkCyan, dark magenta, DarkMagenta, dark red,
DarkRed, light green, LightGreen

@node Index
@unnumbered Index

@printindex cp

@bye
