\input texinfo   @c -*-texinfo-*-
@comment $Id: akfavatar-en.texinfo,v 2.21 2007-11-23 15:31:20 akf Exp $

@comment %**start of header
@setfilename akfavatar-en.info
@settitle AKFAvatar Manual
@afourpaper
@comment %**end of header

@include version.texi

@documentlanguage en
@documentencoding US-ASCII

@dircategory Miscellaneous
@direntry
* AKFAvatar: (akfavatar-en).    A graphical avatar.
@end direntry

@copying
This is the documentation for AKFAvatar
(version @value{VERSION}, @value{UPDATED}).

@quotation
AKFAvatar is a fancy text-viewer, scripting language for making demos, 
and a library for writing programs in C or Pascal.

Homepage: @uref{http://akfoerster.de/akfavatar/}

Copyright @copyright{} 2007 @uref{http://akfoerster.de/, Andreas K. Foerster}

Copying and distribution of this documentation, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end quotation
@end copying

@titlepage
@title AKFAvatar
@subtitle a fancy text-viewer and much more
@author Andreas K. Foerster

@comment The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c the table of contents
@contents

@ifnottex
@node Top
@top AKFAvatar

@insertcopying
@end ifnottex

@menu
* Overview::              Overview of AKFAvatar
* Installation::          How to install AKFAvatar
* Using avatarsay::       Using the tool @command{avatarsay}
* Using gnome-akfavatar:: Using it under GNOME
* Programming::           Programming with AKFAvatar
* Pascal reference::      Reference for Pascal
* Concept Index::         Index of this documentation
@end menu


@node Overview
@chapter Overview of AKFAvatar
@cindex overview

AKFAvatar is a graphical program and a library, where an avatar appears
on the screen, and tells things to the user written in a balloon.  There
can also be recorded audio files, so that the user even can hear, what
it is saying.

AKFAvatar can be used in several different ways.  I list them here from
the most simple one to the most complicated for advanced users.

@enumerate
@item
The most simple thing is to use he command @command{avatarsay} as a fancy 
text-viewer, more or less like @command{more} or @command{less}.

It is not suited for long, complicated texts, but rather for short and 
funny stuff.

@item 
But the command @command{avatarsay} can do much more than that.  It can
be used as a simple scripting language for making demos that you can
show for example at an information booth or in a shop's window.  It can
be used for making funny tutorials.

Don't worry, it sounds more complicated, than it is.  I should rather
say, you can spice up your texts with occasional commands.  Then you can
set the executable bit on your@dots{} ``text'', and it is executable.

@item
The command @command{avatarsay} can also be called from other scripting
languages and the scripting language can communicate with that program
through @acronym{FIFO}s.


@item  
Then there is the library @code{libavatar}, which you can use from
compiling languages.  Currently @w{Free Pascal}, @acronym{GNU}-Pascal
and C are supported.  Especially the Pascal language is suited for
beginners to learn how to program.  The library is simple to use, like writing
command-line programs --- but it's much more fun!

@end enumerate

@page
@section General usage
@cindex keys

A lot of AKFAvatar applications need no interaction with the user.  They
are often demos that are meant to run without any interaction.  So it is
not obvious how to interact with the  program.

@cindex stopping (Esc key)
In most AKFAvatar programs, you can press the key @key{Esc} at any
time to stop the program.  When it runs in a window you can also use 
the close button of your window manager or any other means the window 
system offers for stopping a program.

@cindex pausing (Pause key)
The text is normally displayed in a quite slow pace.  Nevertheless it
might sometimes be to fast.  If you want to have a closer look at the
text, you can press the @key{Pause} key at any time.  (There might be a
small delay in pausing the audio output.)  Press any other key to continue 
again.

@c @cindex flush (Space key)
@c @cindex space key
@c On the other hand sometimes it might be to slow for you.  Then you can
@c use the @key{SPACE} bar.@footnote{The @key{SPACE} bar is the long bar at
@c the bottom of the keyboard, with actually nothing but empty space printed 
@c on it.}  This displays the whole page of text immediately.  The next page 
@c starts in the normal pace again.  So you can press the @key{SPACE} bar 
@c again and again.

@cindex F11
@cindex switching fullscreen/window
@cindex toggle fullscreen/window
@cindex fullscreen mode
@cindex window mode
On some systems you can use the @key{F11} key to toggle between the window
mode and the fullscreen mode.  Alternatively you can also use the key 
combinations @key{Alt}+@key{Enter} or @key{Crtl}+@key{Alt}+@key{F}.

@cindex window usage
When AKFAvatar runs in a window you can resize the window as you wish.  The
content doesn't get resized, but it is centered on the window.  You cannot
resize it beyond a minimal size, which is currently 640 to 480.  You can
of course also maximize the window.  When you minimize the window the 
program continues to print the text.  So you probably want to press the
@key{Pause} key before you minimze the window.

@node Installation
@chapter How to install AKFAvatar
@cindex installation

Although there are binary packages available, you should install AKFAvatar
from the source code package to use the software to its full capacity.

This chapter describes the installation for @sc{posix} compatible operating
systems, mainly for GNU/Linux systems.  There are some hints for other systems
at the end of this chapter.

For short: @samp{./configure && make && make install}

@section Requirements

@subheading Needed

@itemize
@item SDL-1.2.x (version 1.2.11 or higher recommended)@*
@uref{http://libsdl.org/download-1.2.php}@*
You need the ``Runtime Libraries'' as well as the ``Development Libraries''!

Of course SDL needs a graphical environment to run in.
For example the X-Window-System or a Linux framebuffer-device@enddots{}

@item An ANSI-C Compiler (gcc or others)@*
@uref{http://gcc.gnu.org/}
@end itemize

@subheading Recommended

@itemize
@item SDL_image@*
@uref{http://www.libsdl.org/projects/SDL_image/}@*
There the Runtime Libraries are sufficient@*
SDL_image in turn needs other libraries:
libz, libpng, libjpeg, libtiff

Without SDL_image you can only use uncompressed BMP images.
SDL_image can be installed after the installation of this package.

@item iconv@*
on a lot of systems that is already included
@end itemize

@subheading Optional

@itemize
@item GNU-Pascal or Free Pascal@*
@uref{http://www.gnu-pascal.de/}@*
@uref{http://www.freepascal.org/}
@end itemize

@section Installation

@subheading Compiling

Run @samp{./configure}. If that succeeds run @samp{make} to create the
binaries.  There are two variants of avatarsay being compiled: 
1. ``avatarsay'' has been statically linked with the avatar library. 
You can use this to test and play around with it before you install it. 
2. ``avatarsay-d'' is dynamically linked and will only work, when the library
is installed.  This is the variant that gets installed.

@subsubheading Compiling --- special cases
@cindex QVGA
@cindex VGA
@cindex iconv

On some systems you need the use the parameter @option{--with-iconv} with
@command{.configure} to get full iconv support (iconv is a charset-encoding
converter).  This parameter is not needed, when SDL is already configured to
use an external iconv.  But in some cases it is not, although an external 
iconv is available (because maybe there is more than one implementation).
This software (AKFAvatar) does an educated guess to get the internal encoding
for @code{wchar_t} right.  In some cases it might not work.  You might then
provide that information with this option, like this 
@samp{--with-iconv=UCS-4LE}.  On many systems you can get a list with the
command @command{iconv -l}.  If ``WCHAR_T'' or ``wchar_t'' is on the list, 
use that.

To support old versions of SDL on a target machine, it might be 
necessary to use the parameter @option{--with-oldsdl}.  Note that this is
not needed if you just want to run the program on the same machine
on which you compile it.

If you want to use it on devices with a small display, use the 
parameter @option{--enable-size=vga} or @option{--enable-size=qvga} with
configure.  The value @var{vga} means a size of 640*480 pixels, while 
@var{qvga} is for very small displays with 320*240 pixels.  The size @var{qvga}
doesn't look good, it is just barely readable and supports less characters.

@subheading Testing

The program @command{avatarsay} is a text reader and a simple scripting
language.  Try to view this text with that program: @samp{./avatarsay INSTALL}.

You can stop @command{avatarsay} any time with the @key{Esc} key.  On some
systems you can toggle between window and fullscreen mode using the key 
@key{F11}.  Another useful key is the @key{Pause} key.

There are some example scripts in the package. 
Try to run @samp{./fsdemo-en} or whatever language you prefer. 
Open @file{fsdemo-en} in a text-editor to see how to write such 
scripts@enddots{}

You can also use it as a fancy manpage reader.
Try @samp{avtman man}@enddots{}

@subsubheading The script @command{lrun}
@cindex lrun

Dynamically linked programs normally need the libraries to be installed
on the system. The script @command{lrun} can be used to start programs, when
the library is not yet installed.  It searches the libraries also in the
script's directory and in the current directory.  Use it like this:
@samp{./lrun example} finds the library in the current directory.  Or from
the Pascal subdirectory @samp{../lrun multiply} will find the library in the
parent directory.

@subheading Installing

On GNU/Linux systems first make sure @file{/usr/local/lib} is mentioned in
the file @file{/etc/ld.so.conf}; either directly or indirectly. Also make
sure that @file{/usr/local/bin} is in your @code{PATH} evironment variable.

Now get root privileges and run @samp{make install} to install it in 
@file{/usr/local}. If you are low on disk space, you can instead use  
@samp{make install-strip}. This installs binaries stripped from 
debugging information.

If you want to uninstall it later, you can use the command 
@samp{make uninstall}.

@subsubheading Special targets

With the command @samp{make example} you can compile the program 
@file{example.c}.  The file @file{example.c} is an example, which you can use
to start your own programs.  The program gets dynamically linked, that means it
needs the installed library.  If you want to test it without the library being 
installed, use the script @command{lrun} (see above).

@subheading Trouble-shouting
@cindex trouble-shouting

@itemize
@item Problem: the system can't find the library @file{libavatar.so}

Solution: first try to add @file{/usr/local/lib} or wherever you 
installed it to the environment variable @code{LD_LIBRARY_PATH}: 
@samp{export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib}.

As a more permanent solution make sure @file{/usr/local/lib} is directly or
indirectly included in the file @file{/etc/ld.so.conf}. Then run the command
@command{ldconfig} with root privileges.

@item Problem: some characters are not shown correctly with @command{avatarsay}

Solution: There are different character sets. Try to use the parameters
@option{--utf-8} or @option{--latin1}.

@end itemize

@subheading Other systems

@subsubheading BSD
AKFAvatar is known to be compilable with FreeBSD 6.2.  To get iconv support,
install @code{libiconv} and use @samp{./configure --with-iconv}.

@subsubheading Windows / ReactOS
These systems are just partly supported.  I provide binaries which are build
with a crosscompiler.  I haven't compiled them directly under Windows yet, so
you're on your own here.  I'm sorry.

On these systems SDL supports a fallback implementation for iconv.
The charset Windows-1252 (often called ``ANSI'' but it has nothing to do
with ANSI) is not fully supported.  That charset is partly compatible
to the ISO-8859-1 standard, which is supported.  Some characters are
missing then.  If you need these characters, save your text as UTF-8, 
which is also supported.


@node Using avatarsay
@chapter Using the tool @command{avatarsay}
@cindex avatarsay
@cindex command line tool

This chapter explains the various uses of the tool @command{avatarsay}.

@menu
* Text-viewer::                Using @command{avatarsay} as fancy text-viewer.
* Make your text executable::  How to turn your text into a program
* Different avatar image::     Using a different avatar image
* Invoking avatarsay::         Command line interface
* Commands for avatarsay::     Advanced features of @command{avatarsay}
* Pipes::                      Pipes and @acronym{FIFO}s
@end menu

@node Text-viewer
@section Using @command{avatarsay} as fancy text-viewer.
@cindex text-viewer
@cindex viewer
@cindex reader

The program @command{avatarsay} can be used as a fancy text-viewer.
If you have a textfile, say @file{mytext}, then you can read it 
with the command @samp{avatarsay mytext}.  Try it!  Now! @t{@w{;-)}}

That is easy, isn't it?  Well, if your text file is not encoded in 
the right encoding for your system, you might have trouble with 
non-@code{@acronym{ASCII}} characters.  There are different encodings. 
The most commonly used encodings are @code{ISO-8859-1} (also known as
@code{Latin-1}) and  @code{UTF-8}.
So if you have trouble with non-English characters, try to use the 
parameter @option{--encoding=UTF-8} or @option{--encoding=ISO-8859-1} --- 
like this: @samp{avatarsay --encoding=ISO-8859-1 mytext}.

@cindex stripline
@cindex tearline
Now, sometimes you might not want to show the whole in one continuous stream.
So you can structure your text by including a stripline.
A stripline is a line like this: @samp{---------}.  The line must start
at the very first column and there must be at least three successive
hyphens (@code{U+002D}).  Of course you can use more than three ones.
When @command{avatarsay} sees a stripline, it waits a moment and then it 
starts a new page.

@node Make your text executable
@section How to turn your text into a program
@cindex executable text

You don't always have to use the command @command{avatarsay} for viewing
your texts.  You can turn your text itself into a ``program''.  How that 
works depends on your system.

@cindex #!
On a @acronym{POSIX} compatible system, such as the @acronym{GNU} system
you can put a special line at the beginning of your file.  The line looks
like this: @samp{#! /usr/local/avatarsay}.  Of course you have
to make sure that you use the correct pathname.  This has to be the very
first line.  You can put one or more empty lines after this line ---
they are ignored.  Then you have to set the executable bit of your
text file.  That goes like this: @samp{chmod +x mytext}.  Then your text
is executable.  It accepts almost all the options that 
@command{avatarsay} accepts.

On systems like Windows or ReactOS this line doesn't work --- but it doesn't
harm either.  On those systems you have to use a different trick.  You could 
rename your file such, that it has a special extension; for example 
@file{.avt}.  Now you have to configure your system, that the file extension
@file{.avt} gets associated with the program @file{avatarsay.exe}.  Then
you can double-click on your ``text'' and it is executed.

@node Different avatar image
@section Using a different avatar image
@cindex different avatar
@cindex change the avatar
@cindex exchange the avatar

Up to now you have always seen the same avatar --- a gnu.
Maybe you don't like gnus or what you want the avatar to say doesn't 
fit the @acronym{GNU}-project. --- Well, that is just the default avatar. 
You can exchange it.

There are basically two different methods to exchange the avatar in 
@command{avatarsay}:

@enumerate

@item
You can change it globally for any use of @command{avatarsay}. 
This can be done with an environment variable.

@item
Or you can change it on a text-by-text basis, using a command in the 
text-file.

@end enumerate

Well, first you might want to try the environment variable.  That is simple.
The variable is called @env{AVATARIMAGE}.  So with the @code{GNU bash} you 
can set this variable like this: 
@samp{export AVATARIMAGE=/home/user/akfavatar/human-peasant.bmp}. 
Important: You should always use the full path!

Using a command in a text-file is explained in @ref{Commands for avatarsay}.

Which file-formats AKFAvatar supports depends on which libraries you have 
installed.  Uncompressed @code{BMP} images are always supported.

@subsection Transparent avatar background
@cindex transparency (avatar image)

The avatar-image should have a transparent background of course.  Well,
most image formats don't support transparency at all.  Therefore
AKFAvatar has a trick.  If the avatar-image has no transparency, then it
looks up the first color in the image, that is the color in the upper
left corner, and defines this color to be transparent.  So when you
prepare an image as replacement for the avatar, make sure the upper left
corner is ``empty'' and make sure to choose a background color, which
doesn't appear in the part of the image which is meant to be visible. 
Also make sure, that the background is ``flat'' with only one single
color without any variations.  Because of this requirement the
@abbr{JPEG} format is not appropriate, you cannot get a really flat
background in that format.

When you can use image formats which support transparency, then use it.
AKFAvatar will not interfere with it then.  Note however that the trick
explained above is always used when the image @emph{has} no
transparency, independent from the question, whether the image format
@emph{could} have transparency.

@node Invoking avatarsay
@section Invoking @command{avatarsay}

The format for running @command{avatarsay} is:

@example
avatarsay [@var{options}] @var{textfile}(s)
@end example

@noindent
If @var{textfile} is @file{-} then the input is read from @file{stdin} 
and the program doesn't loop.

@need 800
The program @command{avatarsay} supports the following options:

@comment don't use @option here
@table @code
@item --help
@itemx -h
show a short summary about the invocation of @command{avatarsay}

@item --version
@itemx -v
show the version of the command

@item --window
@itemx -w
try to run the program in a window (default)

@item --fullscreen
@itemx -f
try to run the program in fullscreen mode

@item --fullfullscreen
@itemx -F
like @var{-f}, but use the current display size

This option is also useful when there is only a fullscreen mode, but
switching the screen resolution doesn't work; for example with the
@code{VESA} framebuffer device of the kernel Linux

This option is only supported with SDL version 1.2.10 or newer.

@item --encoding=@var{name}
the input data is encoded in the encoding @var{name}

It depends on your systems @code{iconv} implementation, which encodings
are supported.  On some systems you can get a list with the command 
@code{iconv -l}.

@item --latin1
@itemx -l
the input data is encoded in Latin-1

@item --utf-8
@itemx --utf8
@itemx -u8
@itemx -u
the input data is encoded in @code{UTF-8}

@item --once
@itemx -1
run only once (don't loop)

@item --popup
popup, ie. don’t move the avatar in

Use this for a fast popup text. 
Use the command @command{.stop} to also get a fast end.

@item --raw
@itemx -r
output raw text (don't handle any commands or striplines)

@item --ignoreeof
@itemx -i
ignore end of file conditions; use this when the input is not a file

@item --saypipe @var{filename}
@itemx -s @var{filename}
create @dfn{named pipe} for @var{filename}

@xref{Pipes}.

@end table

@subsection Environment variables

The command @command{avatarsay} supports the following environment variables:

@table @code

@item AVATARIMAGE
image file with an avatar with the full path

@item DATADIR
the directory, where images and audio files are located (has no influence on
the environment variable @code{AVATARIMAGE})

@item LC_ALL
@itemx LC_CTYPE
@itemx LANG
these variables influence the default encoding

@end table

@node Commands for avatarsay
@section Commands for @command{avatarsay}
@cindex commands for avatarsay

The program @command{avatarsay} understands a small set of commands.
So you can spice up your ``executable texts'' even further.

A line starting with a hash sign (@code{#}, @code{U+0023}) is a 
@emph{comment}.  Those lines are simply ignored by the program.
@strong{Attention:} unlike in other scripting languages there may
even be no whitespace in front of the hash sign.

You can structure your text by including a @emph{stripline}.
A stripline is a line like this: @samp{---------}.  The line must start
at the very first column and there must be at least three successive
hypens (@code{U+002D}).  Of course you can use more than three ones.

@need 1000
A @emph{command} for @command{avatarsay} starts with a dot (@code{U+002E})
in the very first position of a new line.

@table @command

@item .datadir @var{directory}
with this command you can set the directory, where images and sound files are
located

The data directory can also be set with the environment variable 
@env{AVATARDATADIR}.  The command has precedence over the environment
variable.

@item .avatarimage @var{imagefile}
with this command you can use a different image for the avatar.

@strong{Attention}: This command has to be used before the text starts

The avatar image can also be set with the environment variable 
@env{AVATARIMAGE}.  The command has precedence over the environment
variable.

Which file-formats AKFAvatar supports depends on which libraries you have 
installed.  Uncompressed @code{BMP} images are always supported.

@item .encoding @var{encodingname}
sets the encoding of the text; 
such as @samp{ISO-8859-1} or @samp{UTF-8}

@strong{Attention}: This command has to be used at the beginning of the
file. You can no longer change the encoding inside of the text (which was 
possible in previous versions).

This command can only be used with @code{ASCII} compatible encodings,
such as the @code{ISO-8859}-series or @code{UTF-8}.
The encodings @code{UTF-16} (@code{UCS2}) and @code{UTF-32} (@code{UCS4}) 
can not be set with this command.  But these encodings are in most cases
detected automatically.  (Earlier versions of @command{avatarsay} could not
handle these encodings at all.)

It depends on your systems @code{iconv} implementation, which encodings
are supported.  On some systems you can get a list with the command 
@code{iconv -l}.

@item .backgroundcolor #@var{color-definition}
set a different background color

The @var{color-definition} has to be given as six hexadecimal characters;
with two digits each for @code{red}, @code{green} and @code{blue}. 
The default value is @samp{#CCCCCC}.

@strong{Attention}: This command has to be used before the text starts

@item .left-to-right
@itemx .right-to-left
changes the text direction; this is useful if you have text written in
Hebrew or Yiddish (Arabic is not supported)

You can only switch the text-direction on a line by line basis.  Different
text directions inside of one line is not supported.

@item .flip
flip the page; the same effect as with a stripline

@item .clear
clears the text-area; unlike @command{.flip} it doesn't wait, but clears it 
immediately

@item .pause
a longer pause; the avatar is shown without the balloon for some time

@item .image @var{imagefile}
shows an image for a while (without the avatar)

The image is centered on the screen.  If the image is larger than the screen,
the screen is centered on the image.

You can use a stripline @emph{after} this command if you wish.  
The stripline doesn't have any effect then.

Which file-formats AKFAvatar supports depends on which libraries you have 
installed.  Uncompressed @code{BMP} images are always supported.

@item .audio @var{audiofile}
plays an audio file

The text continues to be shown, so you can play an audio file with the 
recorded words of the following text.

Currently only @code{WAV}-files with @code{PCM} or @code{ADPCM} encoding 
are supported.

@item .waitaudio
wait until the audio output ends

This can be used to synchronize the recorded and the written text to some
extend.

@item .effectpause
short pause while the text stays visible

If you want to make an effect-pause within a line, you can end the previous
line with a backslash (@code{\}, @code{U+005C}), so the line-ending has no
effect for the output.

@item .back @var{number}
delete the last @var{number} of characters

The previous line has to be ended with a backslash (@code{\}, @code{U+005C}).
You could use this command after an @command{.effectpause}-command for a 
nice effect.

@item .read
reserved for later versions

@item .end
end of the text

The avatar moves out. 

Anything behind the @command{.end} command is ignored.

@item .stop
stops the output immediately

The avatar is not moved out, but the text ends immediately.

Anything behind the @command{.stop} command is ignored.

@end table

@node Pipes
@section Pipes and @acronym{FIFO}s
@cindex other commands, using avatarsay with

@cindex pipes
You don't always have to write static texts to use AKFAvatar.  You can use
the command @command{avatarsay} also to show you the output of other commands.
Therefore you can use a single hyphen (@option{-}, @code{U+002D}) as option.

It is best to try these features in a window based environment, where you have
one window for your command line and @command{avatarsay} opens up in a 
separate window.

So try this: @samp{@w{echo "Hey pal, what's GNU?" | avatarsay -}}.  The gnu 
appears and says that words. Be careful with using the exclamation mark 
though, some shells have problems with that.

You can also see the output of any other command with
@command{avatarsay}.  For example try this: @samp{@w{df | avatarsay -}}, or
this: @samp{@w{dir | avatarsay -}}.  You could even read this manual this way:
@samp{@w{makeinfo --plaintext akfavatar.texinfo | avatarsay -}}, 
although that's probably a bit too long.

@cindex FIFOs
@cindex named pipe
Using the command @command{echo} this way to let the avatar say something 
might be fun, but it's not so funny when the window always opens and closes 
and the avatar always moves in and out@enddots{}  This is what a @acronym{FIFO}
is good for.  A @acronym{FIFO} is also called a @dfn{named pipe}, because it
is a pipe with a name.  To use this the command @command{avatarsay} supports
the option @option{--saypipe}.  This is only supported on 
@acronym{POSIX}-compatible systems.  Use it like this:
@samp{@w{avatarsay --saypipe avatar &}}.  Because of the @code{&} at the end 
of the line you get back to the shell prompt immediately.  First you might 
think that nothing happened.  But look into the current directory: there is a 
new entry named @samp{avatar}.  This is the @dfn{named pipe}.  It is a 
communication channel to the program.  Now enter this:
@samp{@w{echo "Hello, anybody there?" > avatar}}.  Now the window opens, the 
avatar moves in, says the text@dots{} and the window stays open.  Go back to 
the window with the command line and let the avatar say something else@enddots{}
That's funny, isn't it?  Of course you can use all the commands as described in
@ref{Commands for avatarsay}.  For example @samp{@w{echo .clear > avatar}} clears
the text-area, and then you can let it say something new; for example 
@samp{@w{df > avatar}}. You can also display an image with the @command{.image} 
command, or play a sound with the @command{.audio} command.

You might sometimes notice delays. They are intentionally there, because it was
not primarily meant to be used interactively.

Now enough fun.  Let's stop it@enddots{}  Can you guess how?
Well you could simply press the close button of the window, but that's boring.
Why not use this: @samp{@w{echo .end > avatar}}. The avatar moves out of the
window, the window closes, and also the @dfn{named pipe} is away.


@node Using gnome-akfavatar
@chapter Using it under @acronym{GNOME}
@cindex GNOME

This chapter explains the use of the tool @command{gnome-akfavatar}.
It is mainly a frontend for the command @command{avatarsay} with some of
its functionality presented in a menu.

@menu
* GNOME Requirements::   What you need to use @command{gnome-akfavatar}
* GNOME Main-menu::      The main-menu of @command{gnome-akfavatar}
@end menu

@node GNOME Requirements
@section What you need to use @command{gnome-akfavatar}.
@cindex requirements for @command{gnome-akfavatar}

The command @command{gnome-akfavatar} is a shell script, so it needs a Bourne
shell.  It has been tested with @acronym{GNU} bash, but any 
@acronym{POSIX}-compatible Bourne shell should be sufficient.

Then it needs the command @command{avatarsay}.  It is searched in the 
@code{PATH} and also in the current directory.

For the visible interface it uses the program @command{zenity}.  As text-editor
it needs @command{gedit} and as help browser it uses @command{yelp}.  These
commands have to be in your @code{PATH}.  They are usually included with 
@acronym{GNOME}.

Since the command @command{avatarsay} is also looked up in the current
directory the package need not be installed.  But the documentation has to be
installed in order to view it from @command{gnome-akfavatar}.

@node GNOME Main-menu
@section The main-menu of @command{gnome-akfavatar}
@cindex menu of @command{gnome-akfavatar}

When you invoke the command @command{gnome-akfavatar} you will get a menu 
from which you can choose what to do.

@noindent
You get the following menu-items:

@table @code
@item show a demo or textfile
You get a file selection box and you can choose a text-file or a demo,
which is then opened in @command{avatarsay}. A @dfn{demo} is a text-file, 
which uses commands for @command{avatarsay} (@pxref{Commands for avatarsay}).

@item create or edit a demo
can be used to create a new demo or edit an existing one. When you enter
a filename which doesn't exist yet, the file is created with an 
appropriate @code{#!}-line.  If you chose a different avatar-image before
invoking this item, a command @command{.avatarimage} is also included in this
file.  The executable bit will be set on the created file.  Note: All this is
just be done for @emph{new} files, not for files which already existed before.

@item show a manpage
you are prompted to enter the name of a manpage you want to view.
If you want to see a manpage from a special section, you can enter the section
number in front of the name separated by a space.  For example @samp{6 intro}
shows the intro manpage of section 6.

@item show the output of a command
shows the output of a command in @command{avatarsay}.  This is only for commands
which print something to the standard output or standard error channel.  It is
not for interactive commands or commands that use curses.

@item change avatar image
lets you select a different avatar image. @xref{Different avatar image}.
This setting is only used for the current session unless you use the item
@dfn{save settings}.

@item fullscreen or window mode
click on @code{Okay} to select the fullscreen-mode, or @code{Cancel} to
select the window-mode.
This setting is only used for the current session unless you use the item
@dfn{save settings}.

@item save settings
saves the settings, that is the avatar image and whether to run in fullscreen
or window mode.  Note: these settings are just for @command{gnome-akfavatar};
they have no influence when you call @command{avatarsay} directly or any other
program using the AKFAvatar library.

@item help for AKFAvatar
shows this document in the help-browser of @acronym{GNOME}

@item Website
opens the homepage for AKFAvatar in a web-browser.

@item Exit
exit the program.  Note: you can also exit the program by clicking on 
@code{Cancel} or the @code{close} button of the window or pressing the
@key{Esc}-key.

@end table


@node Programming
@chapter Programming with AKFAvatar
@cindex programming

If you want to learn how to program, Pascal is a very good choice as your first 
language.  But unfortunately Pascal is not so widely spread.  Nevertheless, 
with @uref{http://www.gnu-pascal.de/, GNU-Pascal} and 
@uref{http://www.freepascal.org/, Free Pascal} we have two very good Free 
Software implementations for Pascal, which are available for many different 
platforms.

Before you ask: Yes, it would have been possible to write the whole thing in 
Pascal.  But C is more widely spread, and that has its consequences.
Every modern system comes with a C compiler (except Windows of course) and 
almost every other language can use libraries written in C.

@menu
* Pascal::           How to program the avatar in Pascal
@end menu

@node Pascal
@section How to program with AKFAvatar in Pascal
@cindex Pascal

You can use AKFAvatar for your Pascal programs.

First of all the library must already be installed on your system.
You also need the file @file{akfavatar.pas}.  That file usually is not 
automatically installed, because there is no standard directory for that.  
But it is found, if it simply is in the current directory.


@subsection Simple use cases

In the source-package you will find the scripts @file{gpcavatar} and 
@file{fpcavatar} in the subdirectory @file{pascal/}.
If you have @acronym{GNU}-Pascal (@command{gpc}) just try this: 
@samp{./gpcavatar example.pas}
This should compile a program @file{example}.

You can compile any pascal program, that just uses plain standard input/output
like this.  There are no changes to the source-code of the pascal program 
necessary!

If you want to start a new page, simply use the command @command{page;}.

That is easy, isn't it?

@display
@emph{Note:} If the program uses the @code{CRT} unit, you have to make 
changes to your program as described below.
@end display

@subsection Installing

Have a look into the scripts @file{gpcavatar} and @file{fpcavatar}.  
There are some variables you should adapt to your needs.  Copy the scripts 
into @file{/usr/local/bin}, so you can use them from anywhere.  Copy the file 
@file{akfavatar.pas} to where you want to have your personal units and make 
sure that directory is listed in the scripts.


@subsection Advanced use

It is also possible to port programs, which use the @code{CRT} unit with
AKFAvatar.  But then you have to make changes to your program.  

The scripts @file{gpcavatar} and @file{fpcavatar} both define the symbol
@code{AKFAVATAR}, so you can use @code{@{$IfDef AKFAVATAR@}} or 
@code{@{$IfNDef AKFAVATAR@}} to control what to do when it it compiled 
with AKFAvatar or without.

To make sure your program can still be used with the @code{CRT} unit, you can 
make something like this: @samp{@{$IfNDef AKFAVATAR@} uses CRT; @{$EndIf@}}. 
The program @file{multiply.pas} is an example for this technique.

AKFAvatar supports most commands and variables from the original @code{CRT} 
unit.  For example the command @command{ClrScr} clears the text-area (not
the whole screen!), @command{ClrEol} clears the rest of the line.
You can use the command @command{GotoXY(@var{x}, @var{y});} to go to a special
position inside the text-area, or use the functions @command{WhereX}
and @command{WhereY} to find out the current position.

@display
@emph{Attention:} The width of the display is 80 characters as
with a terminal display, but the height is often much smaller.
You can find out the dimensions of the text-area with 
@code{ScreenSize.x} and @code{ScreenSize.y}.  The avatar is shown, when it
wasn't visible yet.  So if you want to change the avatar-image or the 
background color, you have to do it, before asking for the size.
@end display

You can use the command @command{TextColor(@var{color});} to change the
color of the text.  You can even set the background color of the 
text with the command @command{TextBackground(@var{color});}, but that
doesn't look as good as on a text-terminal.

To switch back to the ``normal'' text-color, you should use the 
command @command{NormVideo;}.  The ``normal'' text-color is different
when you use it with AKFAvatar or with the @code{CRT} unit.  So with
this command you can ensure, that you get the desired result with 
both.

The commands @command{HighVideo} and @command{LowVideo} are supported
and even the variable @code{TextAttr} is fully supported as in the 
original @code{CRT} unit.  But it is better to avoid the use of that.

The function @command{ReadKey} waits for a key to be pressed and returns
the code of the pressed key.  To find out, whether a key was pressed without
blocking the program, you can use the function @command{KeyPressed}.

@display
@emph{Attention:} 
Function keys are not supported yet.  The key @key{Esc} stops the
program immediately.  If you need the @key{Esc}-key for something
else, you can set the variable @code{CheckEsc} to @code{false}.
The program also stops when @key{Ctrl}+@key{C} is pressed.  You can
set the variable @code{CheckBreak} to @code{false} to avoid that.
The variable @code{CheckBreak} is compatible to the @code{CRT} unit,
while @code{CheckEsc} is an extension.
@end display

There are many additional commands, which are not compatible to the @code{CRT}
unit.

You can use a different image for the avatar with the command
@verbatim
{$IfDef AKFAVATAR}
  AvatarImageFile ('/usr/local/share/pixmaps/human-peasant.bmp');
{$EndIf}
@end verbatim
@noindent
This is of course only an example.
This command must be used before any input/output took place!
The size of the avatar image also influences the size of the text-area.  
Thus this must be used, before using the function @command{ScreenSize}.

If you want to change the background color of the window (not the text-area), 
you can use the command @command{setBackgroundColor(@var{red}, @var{green}, 
@var{blue});} at the beginning of the program.  The value for red, green and 
blue represent the intensity of that color.  You can mix up any possible color 
with these 3 values.  The maximum is 255 ($FF).  For example 
@samp{setBackgroundColor(0, 0, 100);} sets a dark blue background color.

You can define in your program which charset encoding you use.  If you
have an old system based on the Latin-1 charset, use the command
@code{@w{setEncoding ('ISO-8859-1');}}.  If you have to handle with different
charsets at the same time, you can repeat this command whenever you
want to change it.  Different charsets can be visible in the text-area at
the same time.  (Internally a Unicode charset is used.)

There are also characters for Hebrew or Yiddish texts.  To use them you
have to change the text direction.  You can do this with the command
@code{@w{setTextDirection (RightToLeft);}} and  
@code{@w{setTextDirection (LeftToRight);}}. 
Please make sure that you start a new line or page before or after using
this command.  Mixing different text directions in one line is not
supported.

The input/output is done with the common Pascal commands (Read, ReadLn,
Write, WriteLn, Page).  You can use the full Pascal formatting-syntax. 
For example: @samp{@w{WriteLn ('Pi is ', Pi:0:8, ' and so on.');}}

If you want to enforce a new page, use the command @command{page;}.  This is 
in fact also a Standard-Pascal command, which is seldom used; so seldom,
that it is even missing in Free Pascal.  But my unit defines it also for
Free Pascal.  Normally the command @command{page;} is used to get a new page
on a printer.

You can also clear the text-area with the command @command{ClrScr;}. 
Unlike @command{page;} the command @command{ClrScr;} doesn't wait, but
clears the text-area immediately.  You can put the cursor in a deliberate
position with the command @code{@w{GotoXY (x, y);}}.  You find out, where 
the cursor is with the functions @command{WhereX} or @command{WhereY}.  
The coordinates 1, 1 is in the upper left corner (independent from the text
direction).  You can find the maximum positions with @code{ScreenSize.x} and
@code{ScreenSize.y}.  All these names where chosen to get some compatibility
with the @code{CRT} unit.  Actually they don't handle the screen, but only the
text-area!

If you want to print warnings, error messages or debugging information to
the text-terminal, use the file-descriptor @code{stderr}. (This doesn't
work on Windows or ReactOS systems.) 
For example: @samp{WriteLn (stderr, 'Error: ', AvatarGetError);} Well, the
function @command{AvatarGetError} gets an error message from the library.

The command @command{ShowAvatar;} shows only the avatar without the balloon.
The commands @command{MoveAvatarIn;} or @command{MoveAvatarOut;} move the 
avatar in or out.  The Command @code{@w{Delay (500);}} waits approximately 
for 500 milliseconds.  If you prefer the scale in seconds use 
@code{@w{Delay (seconds(0.5));}}.

A full reference for the Pascal language can be found in 
@ref{Pascal reference}.

@node Pascal reference
@appendix Pascal reference
@cindex Pascal reference
@cindex reference for Pascal

The following text shows the @code{interface} of the Pascal unit
@code{akfavatar.pas}:

@verbatiminclude pasref.txt

@node Concept Index
@unnumbered Index

@printindex cp

@bye
