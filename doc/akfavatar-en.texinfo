\input texinfo   @c -*-texinfo-*-

@comment %**start of header
@setfilename akfavatar-en.info
@settitle AKFAvatar Manual
@afourpaper
@comment %**end of header

@include version.texi

@documentlanguage en
@documentencoding US-ASCII

@hyphenation{AKFAvatar avatarsay}
@hyphenation{pa-ra-me-ter inter-fere}

@dircategory Miscellaneous
@direntry
* AKFAvatar: (akfavatar-en).    A graphical avatar.
@end direntry

@copying
This is the documentation for AKFAvatar
(version @value{VERSION}, @value{UPDATED}).

@quotation
AKFAvatar is a fancy user interface for textconsole-programs, a text-viewer,
a scripting language for making demos, and a library for writing programs in 
C or Pascal.

Homepage: @uref{http://akfavatar.nongnu.org/}

Copyright @copyright{} 2007, 2008, 2009 Andreas K. Foerster,
@uref{http://akfoerster.de/}

Copying and distribution of this documentation, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end quotation
@end copying

@titlepage
@title AKFAvatar
@subtitle a fancy user interface
@author Andreas K. Foerster

@comment The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c the table of contents
@contents

@ifnottex
@node Top
@top AKFAvatar

@insertcopying
@end ifnottex

@menu
* Overview::              Overview of AKFAvatar
* Installation::          How to install AKFAvatar
* Using avatarsay::       Using the tool @command{avatarsay}
* Using gnome-akfavatar:: Using it under GNOME
* Formats::               About file formats and values
* Programming::           Programming with AKFAvatar
* Pascal reference::      Reference for Pascal
* C reference::           the C header file @code{akfavatar.h}
* Color names::           Names of colors
* Concept Index::         Index of this documentation
@end menu


@node Overview
@chapter Overview of AKFAvatar
@cindex overview

AKFAvatar is a graphical program and a library, where an avatar appears
on the screen, and tells things to the user written in a balloon.  There
can also be recorded audio files, so that the user even can hear, what
it is saying.

AKFAvatar can be used in several different ways.  I list them here from
the most simple one to the most complicated for advanced users.

@enumerate
@item
You can use the program @command{avatarsay} as a text-terminal, just like
@command{xterm}, but being much more fun. In contrast to @command{xterm} 
it might even run without an x-server.
(Under Windows this function is not available.)

@item
You can use it as user interface for your textmode programs.
(Under Windows this function is not available.)

@item
The command @command{avatarsay} can be used as a fancy text-viewer, more 
or less like @command{more} or @command{less}.

It is not suited for long, complicated texts, but rather for short and 
funny stuff.

@item 
But the command @command{avatarsay} can do much more than that.  It can
be used as a simple scripting language for making demos that you can
show for example at an information booth or in a shop's window.

Don't worry, it sounds more complicated, than it is.  I should rather
say, you can spice up your texts with occasional commands.  Then you can
set the executable bit on your@dots{} ``text'', and it is executable.

@item  
Then there is the library @code{libakfavatar}, which you can use from
compiling languages.  Currently @w{Free Pascal}, @acronym{GNU}-Pascal
and C-compatible languages are supported.  Especially the Pascal language is
suited for beginners to learn how to program.  The library is simple to use,
like writing command-line programs --- but it's much more fun!

@end enumerate

@page
@section General usage (keys)
@cindex keys

@cindex stopping
When an AKFAvatar program runs in a window, you can of course use the close 
button of your window manager for stopping the program.  You can also always 
stop the program by pressing the key combination @key{Alt}+@key{Q}, for example
when it runs in fullscreen mode.  Often you can also stop the program by 
pressing the @key{Esc} key.  But this key might be reserved for other things, 
for example in the terminal-mode of @command{avatarsay}.

@cindex pausing (Pause key)
You can press the @key{Pause} key at any time to pause the running process. 
Press any other key to continue again.

@cindex switching fullscreen/window
@cindex toggle fullscreen/window
@cindex fullscreen mode
@cindex window mode
On some systems you can use the key combinations @key{Alt}+@key{Enter} or 
@key{Crtl}+@key{Alt}+@key{F} to toggle between the fullscreen and the window
mode.  Often you can also simply use the key @key{F11}, but this key might
be reserved for other things, for example in the terminal-mode of 
@command{avatarsay}.

@cindex window usage
When AKFAvatar runs in a window you can resize the window as you wish.  The
content doesn't get resized, but it is centered on the window.  You cannot
resize it beyond a minimal size.  You can of course also maximize the window.  
When you minimize the window the program continues to print the text.  
So you probably want to press the @key{Pause} key before you minimize the 
window.

@node Installation
@chapter How to install AKFAvatar
@cindex installation

Although there are binary packages available, you should install AKFAvatar
from the source code package to use the software to its full capacity.

This chapter describes the installation for @sc{posix} compatible operating
systems, mainly for GNU/Linux systems.  There are some hints for other systems
at the end of this chapter.

For short: @samp{./configure && make && make install}

@section Requirements

@subheading Needed

@itemize
@item SDL-1.2.x (version 1.2.11 or higher recommended)@*
The 1.3 series is @emph{not} backward compatible!@*
@uref{http://libsdl.org/download-1.2.php}@*
You need the ``Runtime Libraries'' as well as the ``Development Libraries''!

Of course SDL needs a graphical environment to run in.
For example the X-Window-System or a Linux framebuffer-device@enddots{}

@item An ANSI-C Compiler (gcc or others)@*
@uref{http://gcc.gnu.org/}

@item Entries for ``linux'' and ``linux-m'' in the terminal database.

This is also needed on systems, which don't use the kernel Linux, but not 
on Windows.  On Debian or derived distributions, you must have the package
``ncurses-term'' installed.

@end itemize

@subheading Recommended

@itemize
@item SDL_image@*
@uref{http://www.libsdl.org/projects/SDL_image/}@*
There the Runtime Libraries are sufficient@*
SDL_image in turn needs other libraries:
libz, libpng, libjpeg, libtiff

Without SDL_image you can only use XPM and uncompressed BMP images.
SDL_image can be installed after the installation of this package.

@item iconv@*
on a lot of systems that is already included
@end itemize

@subheading Optional

@itemize
@item GNU-Pascal or Free Pascal@*
@uref{http://www.gnu-pascal.de/}@*
@uref{http://www.freepascal.org/}
@end itemize

@section Installation

@subheading Compiling

Run @samp{./configure}. If that succeeds run @samp{make} to create the
binaries.  There are two variants of avatarsay being compiled: 
1. ``avatarsay''  is a special compilation, which can be used without 
installing it. 2. ``avatarsay-d'' will only work, when the library
is installed.  This is the variant that gets installed.

@subsubheading Compiling --- special cases
@cindex VGA
@cindex iconv

On some systems you need the use the parameter @option{--with-iconv} with
@command{./configure} to get full iconv support (iconv is a charset-encoding
converter).  This parameter is not needed when SDL is already configured to
use an external iconv.  But in some cases it is not, although an external 
iconv is available (because maybe there is more than one implementation).
This software (AKFAvatar) does an educated guess to get the internal encoding
for @code{wchar_t} right.  In some cases it might not work.  You might then
provide that information with this option, like this 
@samp{--with-iconv=UCS-4LE}.  On many systems you can get a list with the
command @command{iconv -l}.  If ``WCHAR_T'' or ``wchar_t'' is on the list, 
use that.

If you know that SDL_image is always installed, then you can provide the
parameter @option{--enable-link-sdl-image} to directly link to it, instead 
of loading it at runtime.

To support old versions of SDL on a target machine, it might be 
necessary to use the parameter @option{--with-oldsdl}.  Note that this is
not needed if you just want to run the program on the same machine
on which you compile it.

If you want to use it on devices with a small display, use the 
parameter @option{--enable-size=vga} with configure.  
The value @code{vga} means a size of 640*480 pixels.

@subheading Testing

The program @command{avatarsay} is a text reader and a simple scripting
language.  Try to view this text with that program: @samp{./avatarsay INSTALL}.

You can stop @command{avatarsay} any time with the @key{Esc} key.  On some
systems you can toggle between window and fullscreen mode using the key 
@key{F11}.  Another useful key is the @key{Pause} key.

There are some example scripts in the package. 
Try to run @samp{./fsdemo-en} or whatever language you prefer. 
Open @file{fsdemo-en} in a text-editor to see how to write such 
scripts@enddots{}

You can also use it as a fancy manpage reader.
Try @samp{avtman man}@enddots{}

@subsubheading The script @command{lrun}
@cindex lrun

Dynamically linked programs normally need the libraries to be installed
on the system. The script @command{lrun} can be used to start programs, when
the library is not yet installed.  It searches the libraries also in the
script's directory and in the current directory.  Use it like this:
@samp{./lrun example} finds the library in the current directory.  Or from
the Pascal subdirectory @samp{../lrun multiply} will find the library in the
parent directory.

@subheading Installing

On GNU/Linux systems first make sure @file{/usr/local/lib} is mentioned in
the file @file{/etc/ld.so.conf}; either directly or indirectly. Also make
sure that @file{/usr/local/bin} is in your @code{PATH} evironment variable.

Now get root privileges and run @samp{make install} to install it in 
@file{/usr/local}. If you are low on disk space, you can instead use  
@samp{make install-strip}. This installs binaries stripped from 
debugging information.

If you want to uninstall it later, you can use the command 
@samp{make uninstall}.

@subsubheading Special targets

With the command @samp{make example} you can compile the program 
@file{example.c}.  The file @file{example.c} is an example, which you can use
to start your own programs.  The program gets dynamically linked, that means it
needs the installed library.  If you want to test it without the library being 
installed, use the script @command{lrun} (see above).

@subheading Trouble-shooting
@cindex trouble-shooting

@itemize
@item Problem: the system can't find the library @file{libakfavatar.so}

Solution: first try to add @file{/usr/local/lib} or wherever you 
installed it to the environment variable @code{LD_LIBRARY_PATH}: 
@samp{export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib}.

As a more permanent solution make sure @file{/usr/local/lib} is directly or
indirectly included in the file @file{/etc/ld.so.conf}. Then run the command
@command{ldconfig} with root privileges.

@item Problem: some characters are not shown correctly with @command{avatarsay}

Solution: There are different character sets. Try to use the parameters
@option{--utf-8} or @option{--latin1}.

@end itemize

@subheading Other systems

@subsubheading BSD
AKFAvatar is known to be compilable with FreeBSD 6.2.  To get iconv support,
install @code{libiconv} and use @samp{./configure --with-iconv}.

@subsubheading Windows
Windows is just partly supported.  I provide binaries which are build
with a crosscompiler.  I haven't compiled them directly under Windows yet, so
you're on your own here.  I'm sorry.

For systems like these SDL supports a fallback implementation for iconv.
The charset Windows-1252 (often called ``ANSI'' but it has nothing to do
with @acronym{ANSI}) is not fully supported.  That charset is partly compatible
to the ISO-8859-1 standard, which is supported.  Some characters are
missing then.  If you need these characters, save your text as UTF-8, 
which is also supported.


@node Using avatarsay
@chapter Using the tool @command{avatarsay}
@cindex avatarsay
@cindex command line tool

This chapter explains the various uses of the tool @command{avatarsay}.

@menu
* Text-terminal::              Using @command{avatarsay} as fancy text-terminal
* Text-viewer::                Using @command{avatarsay} as fancy text-viewer
* Make your text executable::  How to turn your text into a program
* Different avatar image::     Using a different avatar image
* Invoking avatarsay::         Command line interface
* Commands for avatarsay::     Advanced features of @command{avatarsay}
* Pipes::                      Pipes
* Archive-files::              Archive-files
@end menu

@node Text-terminal
@section Using @command{avatarsay} as fancy text-terminal
@cindex text-terminal

The program @command{avatarsay} can be used as a fancy text-terminal and as a 
frontend for textconsole programs on @sc{posix}-compatible systems (not for 
Windows).

From the main menu you can choose ``terminal-mode'', or you can start 
@command{avatarsay} with the option @option{--terminal}, or @option{-t} for
short. This gives you a terminal session with the default shell for your
system-account. If you don't like colors being used in the balloon, you can use
the option @option{--nocolor}, or @option{-b} for short.

If you want to use a different shell or starting directory, you can set the
environment variables @env{SHELL} and @env{HOME} to different values.
By the way, the program can get the correct values also when these variables 
are not set.

@subsection frontend for text-console programs
@cindex frontend
@cindex wrapper
@cindex console based programs

You can use @command{avatarsay} as a frontend for text-console programs.
Use the option @option{--execute}, or @option{-x} for short, followed by the
name of the program to execute.  You can of course also combine this with the 
option @option{--nocolor}.  Options after the programs name are passed to
the executed program.  That means, the order of the options is important.

For example to log in into another machine, using @command{ssh}:
@example
avatarsay --execute ssh example.net
@end example

To write an e-mail with the program @command{mutt}:
@example
avatarsay -bx mutt pal@@example.net
@end example

Write the mail with a mail program on the remote machine:
@example
avatarsay -bx ssh -t example.net mutt pal
@end example

Note: when you use @command{ssh} this way, you have to use the option 
@option{-t} for @command{ssh}.

Surf the web with @command{lynx}:
@example
avatarsay -bx lynx
@end example

As you can see, you can use it to actually do very weird things with it.


@subsection the terminal-type

The program @command{avatarsay} simulates the text-console of the kernel Linux.
So the environment variable @env{TERM} is set to either @code{linux} or 
@code{linux-m}.

Because this choice might lead to some confusion, I try to explain, what this 
does @emph{not} mean: 

@itemize
@item
It does @emph{not} mean, that the code is limited to systems, that use Linux as
kernel.  It was successfully tested on FreeBSD and should run fairly well 
on other @sc{posix}-compatible systems also.

@item
It does @emph{not} mean, that the variable @env{TERM} should be changed on 
other systems.  Leave it as it is.  But the system should have entries for 
@code{linux} and @code{linux-m} in its terminal database(s).

@item
It does @emph{not} mean, that I have used code from Linux.  I just read the
manpage @code{console_codes} and the Terminfo and Termcap entries and some 
other documents to get information.

@item
It does @emph{not} mean, that the terminal is not compliant to standards.
In fact, the console emulation of the kernel Linux is very compatible to
@code{ANSI X3.64} (@code{ECMA-48}).  But there are things missing and some
things, like key-codes are extra.  So the value @code{linux} is actually the 
right one.

@end itemize

@subsection extensions 

The terminal-emulation of @command{avatarsay} supports 
extensions, which are not in @code{ANSI X3.64} (@code{ECMA-48})
and which are not supported by the Linux terminal emulation.

To use these extensions in your own program, it is recommended first to check 
for the existence of the environment variable @code{AKFAVTTERM}.

@table @code
@item CSI ? 56 h
switches the slowprint-mode on (deprecated: use APC)

@item CSI ? 56 l
switches the slowprint-mode off (deprecated: use APC)

@item CSI 8 ; @var{height} ; @var{width} t
set the height and width (in characters) of the balloon.
The value 0 sets the maximum value.
(This is actually compatible to the original @command{xterm})

@item APC @var{command} ST
sends a command to avatarsay. @xref{Commands for avatarsay}.

@end table

further extensions are planned.

@emph{Explanations:}

@table @asis

@item @dfn{ESC} (Escape)
is the control code @code{1Bhex}

@item @dfn{CSI} (Control Sequence Introducer)
can be represented with the control sequence @code{ESC} followed by 
@code{[} or in some charsets with the single control code @code{9Bhex}.

@item @dfn{APC} (Application Program Command)
can be represented with the control sequence @code{ESC} followed by @code{_}, 
or in some charsets with the single control code @code{9Fhex}.

@item @dfn{ST} (String Terminator)
can be represented with the control sequence @code{ESC} followed by @code{\}, 
or in some charsets with the single control code @code{9Chex}.

@end table

The variants with @code{ESC} should be preferred. Especially in UTF-8 there 
is no advantage in the single control codes, since they also have to be 
encoded with two bytes.

@node Text-viewer
@section Using @command{avatarsay} as fancy text-viewer.
@cindex text-viewer
@cindex viewer
@cindex reader

The program @command{avatarsay} can be used as a fancy text-viewer.
If you have a textfile, say @file{mytext}, then you can read it 
with the command @samp{avatarsay mytext}.  Try it!  Now! @t{@w{;-)}}

That is easy, isn't it?  Well, if your text file is not encoded in 
the right encoding for your system, you might have trouble with 
non-@code{@acronym{ASCII}} characters.  There are different encodings. 
The most commonly used encodings are @code{ISO-8859-1} (also known as
@code{Latin-1}) and  @code{UTF-8}.
So if you have trouble with non-English characters, try to use the 
parameter @option{--encoding=UTF-8} or @option{--encoding=ISO-8859-1} --- 
like this: @samp{avatarsay --encoding=ISO-8859-1 mytext}.

@cindex stripline
@cindex tearline
Now, sometimes you might not want to show the whole in one continuous stream.
So you can structure your text by including a stripline.
A stripline is a line like this: @samp{---------}.  The line must start
at the very first column and there must be at least three successive
hyphens (@code{U+002D}).  Of course you can use more than three ones.
When @command{avatarsay} sees a stripline, it waits a moment and then it 
starts a new page.

@node Make your text executable
@section How to turn your text into a program
@cindex executable text

You don't always have to use the command @command{avatarsay} for viewing
your texts.  You can turn your text itself into a ``program''.  How that 
works depends on your system.

@cindex #!
On a @acronym{POSIX} compatible system, such as the @acronym{GNU} system
you can put a special line at the beginning of your file.  The line looks
like this: @samp{#! /usr/local/avatarsay}.  Of course you have
to make sure that you use the correct pathname.  This has to be the very
first line.  You can put one or more empty lines after this line ---
they are ignored.  Then you have to set the executable bit of your
text file.  That goes like this: @samp{chmod +x mytext}.  Then your text
is executable.  It accepts almost all the options that 
@command{avatarsay} accepts.

On systems like Windows or ReactOS this line doesn't work --- but it doesn't
harm either.  On those systems you have to use a different trick.  You could 
rename your file such, that it has a special extension; for example 
@file{.avt}.  Now you have to configure your system, that the file extension
@file{.avt} gets associated with the program @file{avatarsay.exe}.  Then
you can double-click on your ``text'' and it is executed.

@node Different avatar image
@section Using a different avatar image
@cindex different avatar
@cindex change the avatar
@cindex exchange the avatar

Up to now you have always seen the same avatar --- Well, that is just the 
default avatar.  You can exchange it.

There are different methods to exchange the avatar for @command{avatarsay}:

You can change it globally for any use of @command{avatarsay}. 
This can be done either with an environment variable or you can use a 
system-wide configuration file.

Well, first you might want to try the environment variable.  That is simple.
The variable is called @env{AVATARIMAGE}.  So with the @code{GNU bash} you 
can set this variable like this: 
@samp{export AVATARIMAGE=/usr/local/share/pixmaps/myavatar.xpm}. 
@strong{Important:} You should always use the full path!

If you want to use a configuration file, create a file named
@file{/etc/avatarsay} and put something like in this example into it:

@example
AVATARIMAGE=/usr/local/share/pixmaps/myavatar.xpm
@end example

If you write a text you want to be shown by @command{avatarsay}, you can 
change the avatar-image on a text-by-text basis, using a command in the 
text-file.  This is explained in @ref{Commands for avatarsay}.

Which file-formats AKFAvatar supports depends on which libraries you have 
installed (@pxref{Formats}).

@subsection Transparent avatar background
@cindex transparency (avatar image)

The avatar-image should have a transparent background of course.  Well,
a lot of image formats don't support transparency at all.  Therefore
AKFAvatar has a trick.  If the avatar-image has no transparency, then it
looks up the first color in the image, that is the color in the upper
left corner, and defines this color to be transparent.  So when you
prepare an image as replacement for the avatar, make sure the upper left
corner is ``empty'' and make sure to choose a background color, which
doesn't appear in the part of the image which is meant to be visible. 
Also make sure, that the background is ``flat'' with only one single
color without any variations.  Because of this requirement the
@abbr{JPEG} format is not appropriate, you cannot get a really flat
background in that format.

So you should use an image format which supports transparency.
AKFAvatar will not interfere with it then.  Note however that the trick
explained above is always used when the image @emph{has} no
transparency, independent from the question, whether the image format
@emph{could} have transparency.

@node Invoking avatarsay
@section Invoking @command{avatarsay}

The format for running @command{avatarsay} is:

@example
avatarsay [@var{options}] [@var{textfiles}]
avatarsay [@var{options}] --execute @var{program} [@var{program options}]
@end example

@noindent
If @var{textfiles} is @file{-} then the input is read from @file{stdin} 
and the program doesn't loop.

@need 800
The program @command{avatarsay} supports the following options:

@comment don't use @option here
@table @code
@item --help
@itemx -h
show a short summary about the invocation of @command{avatarsay}

@item --version
@itemx -v
show the version of the command

@item --terminal
@itemx -t
terminal mode, ie. run a shell in the balloon

@item --execute
@itemx -x
execute program in the balloon

A program name must be given. Options after the program name are options
for the executed program.

@item --nocolor
@itemx -b
no color for executed programs and the terminal mode

@item --window
@itemx -w
try to run the program in a window (default)

@item --fullscreen
@itemx -f
try to run the program in fullscreen mode

@item --fullfullscreen
@itemx -F
like @option{-f}, but use the current display size

This option is also useful when there is only a fullscreen mode, but
switching the screen resolution doesn't work; for example with the
@code{VESA} framebuffer device of the kernel Linux

This option is only supported with SDL version 1.2.10 or newer.

@item --encoding=@var{name}
the input data is encoded in the encoding @var{name}

It depends on your systems @code{iconv} implementation, which encodings
are supported.  On some systems you can get a list with the command 
@code{iconv -l}.

@item --latin1
@itemx -l
the input data is encoded in Latin-1

@item --utf-8
@itemx --utf8
@itemx -u8
@itemx -u
the input data is encoded in @code{UTF-8}

@item --once
@itemx -1
run only once (don't loop)

@item --popup
@itemx -p
popup, ie. don’t move the avatar in

Use this for a fast popup text. 
Use the command @command{[stop]} to also get a fast end.

@item --no-delay
@itemx -n
don't delay the text output

@item --raw
@itemx -r
output raw text (don't handle any commands or striplines)

@item --ignoreeof
@itemx -i
ignore end of file conditions; use this when the input is not a file

@end table

@subsection Environment variables

The command @command{avatarsay} supports the following environment variables:

@table @code

@item AVATARIMAGE
image file with an avatar with the full path

@item DATADIR
the directory, where images and audio files are located (has no influence on
the environment variable @env{AVATARIMAGE})

@item LC_ALL
@itemx LC_CTYPE
@itemx LANG
these variables influence the default encoding and the language

@item SHELL
the shell for the terminal-mode

@item HOME
the starting directory for the teminal-mode

@end table

@subsection Configuration file
@cindex configuration file for avatarsay

You can also use a configuration file with the name @file{/etc/avatarsay} to 
set values for @code{AVATARIMAGE} and @code{DATADIR}.

for example:
@example
AVATARIMAGE=/usr/local/share/pixmaps/myavatar.xpm
AVATARDATADIR=/usr/local/share/akfavatar
@end example

@xref{Different avatar image}.

@node Commands for avatarsay
@section Commands for @command{avatarsay}
@cindex commands for avatarsay

With the program @command{avatarsay} you can also write some simple demos. 
You don't have to learn a programming language for that.

A line starting with a hash sign (@code{#}, @code{U+0023}) is a 
@emph{comment}.  Those lines are simply ignored by the program.
@strong{Attention:} unlike in other scripting languages there may
even be no whitespace in front of the hash sign.

You can structure your text by including a @emph{stripline}.
A stripline is a line like this: @samp{---------}.  The line must start
at the very first column and there must be at least three successive
hypens (@code{U+002D}).  Of course you can use more than three ones.

@need 1000
A @dfn{command} for an @command{avatarsay}-demo has to be enclosed in 
square brackets and it must be in the very first position of a new line.

@emph{remark:} Earlier versions of @command{avatarsay} used a different
style.

Most of these commands can also be used from the terminal-emulation.
From a shell you can use the command @command{avtcmd} to send commands to
avatarsay. Use it like this: @samp{avtcmd size 5, 40}. 
You can use the APC escape sequence from you own programs or scripts.

@table @command

@item datadir @var{directory}
with this command you can change the directory. This is needed to load images and sound files.

The data directory can also be set with the environment variable 
@env{AVATARDATADIR}.  The command has precedence over the environment
variable.

@item avatarimage @var{imagefile}
with this command you can use a different image for the avatar.

You can leave the name of the imagefile away to switch back to the default
avatar again. The special name @code{info} uses a small info-icon as
avatarimage. The special name @code{none} removes the avatarimage. This
gives you the maximum size for the text-area, but it looks boring.

@strong{Attention}: This command should be used before the text starts

The avatar image can also be set with the environment variable 
@env{AVATARIMAGE}.  The command has precedence over the environment
variable.

Which file-formats AKFAvatar supports depends on which libraries you have 
installed (@pxref{Formats}).

@item encoding @var{encodingname}
just for demos: sets the encoding of the text; 
such as @samp{ISO-8859-1} or @samp{UTF-8}

@strong{Attention}: This command has to be used at the beginning of the
file. You can no longer change the encoding inside of the text (which was 
possible in previous versions).

This command can only be used with @code{ASCII} compatible encodings,
such as the @code{ISO-8859}-series or @code{UTF-8}.
The encodings @code{UTF-16} (@code{UCS2}) and @code{UTF-32} (@code{UCS4}) 
can not be set with this command.  But these encodings are in most cases
detected automatically.  (Earlier versions of @command{avatarsay} could not
handle these encodings at all.)

It depends on your systems @code{iconv} implementation, which encodings
are supported.  On some systems you can get a list with the command 
@code{iconv -l}.

@item title @var{title}
changes the title of the window. When you use this command without a title 
name, the title is reset to ``AKFAvatar''.

@item scrolling off | on
switches scrolling off or on.

@item slow on | off
switches the slow-printing mode on or off

@item backgroundcolor #@var{color-definition}
set a different background color

The @var{color-definition} has to be given as six hexadecimal characters;
with two digits each for @code{red}, @code{green} and @code{blue}. 
The default value is @samp{#E0D5C5}.

@strong{Attention}: This command should used before the text starts

@item left-to-right
@itemx right-to-left
changes the text direction; this is useful if you have text written in
Hebrew or Yiddish (Arabic is not supported)

You can only switch the text-direction on a line by line basis.  Different
text directions inside of one line is not supported.

@item size @var{height}, @var{width}
set the size of the balloon.

The size cannot exceed the maximum size. The value 0 sets the maximum size.
the command with no values sets the maximum size for the whole balloon.

@item height @var{height}
set the height of the balloon.

The size cannot exceed the maximum size. 
The value 0 or no value sets the maximum size.

@item width @var{width}
set the width of the balloon.

The size cannot exceed the maximum size. 
The value 0 or no value sets the maximum size.

@item flip
flip the page; the same effect as with a stripline: wait some time and then
clear the text-area

@item clear
clears the text-area; unlike @command{flip} it doesn't wait, but clears it 
immediately

@item move out | in
moves the avatar out or in

@item wait @var{millisecods}
waits a given time, or a default amount of time, when no value is given

@item pause
a longer pause; waits a while, then the avatar is shown without the 
balloon for some time

@item image @var{imagefile}
waits some time and then shows the image for a while without the avatar

The image is centered on the screen.  If the image is larger than the screen,
the screen is centered on the image.

You can use a stripline @emph{after} this command if you wish.  
The stripline doesn't have any effect then.

Which file-formats AKFAvatar supports depends on which libraries you have 
installed (@pxref{Formats}).

@item rawaudiosettings @var{samplingrate} @var{encoding} mono|stereo
settings for loading raw audio files

This command is needed before you can play any raw audio files.
Raw audio files contain audio data with no header or container format.
The @var{encoding} can be one of @code{u8}, @code{s8}, @code{u16le},
@code{u16be}, @code{u16sys}, @code{s16le}, @code{s16be}, @code{s16sys}, 
@code{mu-law} | @code{u-law}, @code{A-law}. For example @code{u8} means 
@dfn{unsigned 8-Bit linear PCM} or @code{s16le} means @dfn{signed 16-Bit 
linear PCM, little endian}.

For example: @samp{rawaudiosettings 16000 mu-law mono}

@item audio @var{audiofile}
loads and plays an audio file

The text continues to be shown, so you can play an audio file with the 
recorded words of the following text.

Supported are @code{AU}-files with 8- or 16-Bit linear PCM, µ-law and A-law
encoding.
Furthermore supported are @code{WAV}-files with @code{PCM} or @code{ADPCM} 
encoding.
After the command @command{rawaudiosettings} is used, it can also play raw
audio files.

@item audioloop @var{audiofile}
like @command{audio}, but the audio-data is played in an endless loop

@item loadaudio @var{audiofile}
loads an audio file for later playback

Only one single audio file can be loaded at a time. An eventually running 
audio-output is stopped by this command.

Supported are @code{AU}-files with 8- or 16-Bit linear PCM, µ-law and A-law
encoding.
Furthermore supported are @code{WAV}-files with @code{PCM} or @code{ADPCM} 
encoding.
After the command @command{rawaudiosettings} is used, it can also play raw
audio files.

@item playaudio
plays an audio file loaded by @command{loadaudio}

@item playaudioloop
plays an audio file loaded by @command{loadaudio}
in an endless loop

@item stopaudio
stops the audio output immediately

@item waitaudio
wait until the audio output ends; a loop is ended by this command

This can be used to synchronize the recorded and the written text to some
extend.

@item effectpause
short pause while the text stays visible

@item back @var{number} @var{text}
delete the last @var{number} of characters and print the @var{text}

You could use this command after an @command{[effectpause]}-command for a 
nice effect.

@item read
reserved for later versions

@item credits @var{textfile}
shows a textfile as ``final credits''

@item end
just for demos: end of the text

The avatar moves out. 

Anything behind the @command{end} command is ignored.

@item stop
just for demos: stops the output immediately

The avatar is not moved out, but the text ends immediately.

Anything behind the @command{stop} command is ignored.

@end table

@node Pipes
@section Pipes
@cindex other commands, using avatarsay with

@cindex pipes
You don't always have to write static texts to use AKFAvatar.  You can use
the command @command{avatarsay} also to show you the output of other commands.
Therefore you can use a single hyphen (@option{-}, @code{U+002D}) as option.

It is best to try these features in a window based environment, where you have
one window for your command line and @command{avatarsay} opens up in a 
separate window.

So try this: @samp{@w{echo "Hey pal, what's GNU?" | avatarsay -}}.  The avatar 
appears and says that words. Be careful with using the exclamation mark 
though, some shells have problems with that.

You can also see the output of any other command with
@command{avatarsay}.  For example try this: @samp{@w{df | avatarsay -}}, or
this: @samp{@w{dir | avatarsay -}}.  You could even read this manual this way:
@samp{@w{makeinfo --plaintext akfavatar.texinfo | avatarsay -}}, 
although that's probably a bit too long.

@node Archive-files
@section Archive-files
@cindex archive-files

The program @command{avatarsay} can also read special archive-files. 
For making your own archive-files you need additional software. Archive-files
are in the @dfn{AR}-format. You can use for example the @command{ar}-program
that comes with the ``GNU binutils''. But be careful: there are some 
requirements and limitations.

Archive files should get the file-extension @file{.avt}.

The very first archive member must be the script for @command{avatarsay} and 
it must have the name @file{AKFAvatar-demo}. The other archive members can 
be added in any order you like.

The names of archive members are limited to 15 characters. 
GNU @command{ar} and some other @command{ar} implementations have extensions
to support longer file names, but @command{avatatarsay} cannot read that. 
On the other hand, I think that 15 characters is more than enough. Note that 
archive members need not have file-extensions, they are recognized from their
content. To make sure that filenames get cut at 15 characters you can use the 
option @option{-f} with GNU @command{ar} or @option{-T} for some other 
@command{ar} implementations. The TARGA image file format cannot be used in
archive files.

An archive-file should have a member with the name @file{info}. So to get
more information about an archive you can use the command 
@samp{ar p demo.avt info}. This @file{info}-member can be the same you use
for the final-credits.

Other programs can recognize archive-files for @command{avatarsay} from the 
beginning of the file. It always starts with @code{!<arch>\nAKFAvatar}, where
@code{\n} is one single character with the value 10.

@node Using gnome-akfavatar
@chapter Using it under @acronym{GNOME}
@cindex GNOME

This chapter explains the use of the tool @command{gnome-akfavatar}.
It is mainly a frontend for the command @command{avatarsay} with some of
its functionality presented in a menu.

@menu
* GNOME Requirements::   What you need to use @command{gnome-akfavatar}
* GNOME Main-menu::      The main-menu of @command{gnome-akfavatar}
@end menu

@node GNOME Requirements
@section What you need to use @command{gnome-akfavatar}.
@cindex requirements for @command{gnome-akfavatar}

The command @command{gnome-akfavatar} is a shell script, so it needs a Bourne
shell.  It has been tested with @acronym{GNU} bash, but any 
@acronym{POSIX}-compatible Bourne shell should be sufficient.

Then it needs the command @command{avatarsay}.  It is searched in the 
@code{PATH} and also in the current directory.

For the visible interface it uses the program @command{zenity}.  As text-editor
it needs @command{gedit} and as help browser it uses @command{yelp}.  These
commands have to be in your @code{PATH}.  They are usually included with 
@acronym{GNOME}.

Since the command @command{avatarsay} is also looked up in the current
directory the package need not be installed.  But the documentation has to be
installed in order to view it from @command{gnome-akfavatar}.

@node GNOME Main-menu
@section The main-menu of @command{gnome-akfavatar}
@cindex menu of @command{gnome-akfavatar}

When you invoke the command @command{gnome-akfavatar} you will get a menu 
from which you can choose what to do.

@noindent
You get the following menu-items:

@table @code
@item show a demo or textfile
You get a file selection box and you can choose a text-file or a demo,
which is then opened in @command{avatarsay}. A @dfn{demo} is either 
a text-file, which uses commands for @command{avatarsay} 
(@pxref{Commands for avatarsay}), or it can also be a package that also
contains images or audio-files.

@item create or edit a demo
can be used to create a new demo or edit an existing one. When you enter
a filename which doesn't exist yet, the file is created with an 
appropriate @code{#!}-line.  If you chose a different avatar-image before
invoking this item, a command @command{[avatarimage]} is also included in this
file.  The executable bit will be set on the created file.  Note: All this is
just be done for @emph{new} files, not for files which already existed before.

@item show a manpage
you are prompted to enter the name of a manpage you want to view.
If you want to see a manpage from a special section, you can enter the section
number in front of the name separated by a space.  For example @samp{6 intro}
shows the intro manpage of section 6.

@item show the output of a command
shows the output of a command in @command{avatarsay}.  This is only for commands
which print something to the standard output or standard error channel.  It is
not for interactive commands or commands that use curses.

@item change avatar image
lets you select a different avatar image. @xref{Different avatar image}.
This setting is only used for the current session unless you use the item
@dfn{save settings}.

@item fullscreen or window mode
click on @code{Okay} to select the fullscreen-mode, or @code{Cancel} to
select the window-mode.
This setting is only used for the current session unless you use the item
@dfn{save settings}.

@item save settings
saves the settings, that is the avatar image and whether to run in fullscreen
or window mode.  Note: these settings are just for @command{gnome-akfavatar};
they have no influence when you call @command{avatarsay} directly or any other
program using the AKFAvatar library.

@item help for AKFAvatar
shows this document in the help-browser of @acronym{GNOME}

@item Website
opens the homepage for AKFAvatar in a web-browser.

@item Exit
exit the program.  Note: you can also exit the program by clicking on 
@code{Cancel} or the @code{close} button of the window or pressing the
@key{Esc}-key.

@end table

@node Formats
@chapter About file formats and values

@section Colors
@cindex colors

One way to define a color is to name it in plain English. Names with a blank
can sometimes not be used. But you can write it together in one word then.
An overview over the recognized names is in @ref{Color names}.

Another way is to write the RGB values in hexadecimal, introduced by the hash
character (@code{#}).  You can use a 6 or 3 digits value.  For example for 
intensive red you can write either @code{#f00} or @code{#ff0000}. The first 
value (one or two digits) is for red, the next for green and the last for blue.
With these values you can mix any possible color.  More examples: 
black is @code{#000}, white is @code{#fff}, yellow is @code{#ff0}, violet is
@code{#f0f} and so on.  For darker colors you simply use lower values: 
@code{#808} is a dark violet, while @code{#fdf} a very light violet.

@section Images
@cindex images

AKFAvatar supports images in the @abbr{XPM} and in the uncompressed 
@abbr{BMP} format out of the box.
The @abbr{XPM} format is better suited for avatar-images, because it supports
transparency.  For other formats the software has to do a very dirty hack 
to achieve some pseudo-transparency (@pxref{Different avatar image}).
@abbr{XPM} is also much better for programmers, because the files can easily be 
included in code, especially in code of C compatible languages.  But there 
is also one drawback: @abbr{XPM} files with lots of colors can get very large.
So better just use few colors. But there is no arbitrary limit.

If you have the library @code{SDL_image} installed, you can use a couple of
other image formats too, including @abbr{PNG} and @abbr{JPEG}, if you also
have the libraries for them. Note however that @abbr{JPEG} is not suited 
for avatar images (the ``dirty trick'' described above doesn't work with 
@abbr{JPEG} at all).

Both, the @abbr{XPM} format and the @abbr{BMP} format are not compressed, so
they occupy some space on the harddisk.  But diskspace should not be a big
issue nowadays.
Note however: when you put them into a compressed archive file for
distribution, then this doesn't make any difference.  Then these files will
actually be compressed, while files, that already were compressed, cannot be
compressed much further.  So that evens out.  (Only the @abbr{JPEG} format 
has an advantage here, because it is a lossy format.)

@node Programming
@chapter Programming with AKFAvatar
@cindex programming

If you want to learn how to program, Pascal is a very good choice as your first 
language.  But unfortunately Pascal is not so widely spread.  Nevertheless, 
with @uref{http://www.gnu-pascal.de/, GNU-Pascal} and 
@uref{http://www.freepascal.org/, Free Pascal} we have two very good Free 
Software implementations for Pascal, which are available for many different 
platforms.

Before you ask: Yes, it would have been possible to write the whole thing in 
Pascal.  But C is more widely spread, and that has its consequences.
Every modern system comes with a C compiler and almost every other language 
can use libraries written in C.

@menu
* Pascal::           How to program the avatar in Pascal
@end menu

@node Pascal
@section How to program with AKFAvatar in Pascal
@cindex Pascal

You can use AKFAvatar for your Pascal programs.

First of all the library must already be installed on your system.
You also need the file @file{akfavatar.pas}.  That file usually is not 
automatically installed, because there is no standard directory for that.  
But it is found, if it simply is in the current directory.


@subsection Simple use cases

In the source-package you will find the scripts @file{gpcavatar} and 
@file{fpcavatar} in the subdirectory @file{pascal/}.
If you have @acronym{GNU}-Pascal (@command{gpc}) just try this: 
@samp{./gpcavatar example.pas}
This should compile a program @file{example}.

You can compile any pascal program, that just uses plain standard input/output
like this.  There are no changes to the source-code of the pascal program 
necessary!

If you want to start a new page, simply use the command @command{page;}.

That is easy, isn't it?

@display
@emph{Note:} If the program uses the @code{CRT} unit, you have to make 
changes to your program as described below.
@end display

@subsection Installing

Have a look into the scripts @file{gpcavatar} and @file{fpcavatar}.  
There are some variables you should adapt to your needs.  Copy the scripts 
into @file{/usr/local/bin}, so you can use them from anywhere.  Copy the file 
@file{akfavatar.pas} to where you want to have your personal units and make 
sure that directory is listed in the scripts.


@subsection Advanced use

It is also possible to port programs, which use the @code{CRT} unit with
AKFAvatar.  But then you have to make changes to your program.  

The scripts @file{gpcavatar} and @file{fpcavatar} both define the symbol
@code{AKFAVATAR}, so you can use @code{@{$IfDef AKFAVATAR@}} or 
@code{@{$IfNDef AKFAVATAR@}} to control what to do when it it compiled 
with AKFAvatar or without.

To make sure your program can still be used with the @code{CRT} unit, you can 
make something like this: @samp{@{$IfNDef AKFAVATAR@} uses CRT; @{$EndIf@}}. 
The program @file{multiply.pas} is an example for this technique.

AKFAvatar supports most commands and variables from the original @code{CRT} 
unit.  For example the command @command{ClrScr} clears the text-area (not
the whole screen!), @command{ClrEol} clears the rest of the line.
You can use the command @command{GotoXY(@var{x}, @var{y});} to go to a special
position inside the text-area, or use the functions @command{WhereX}
and @command{WhereY} to find out the current position.

@display
@strong{Attention:} The width of the display is 80 characters as
with a terminal display, but the height is often much smaller.
You can find out the dimensions of the text-area with 
@code{ScreenSize.x} and @code{ScreenSize.y}.  The avatar is shown, when it
wasn't visible yet.  So if you want to change the avatar-image or the 
background color, you have to do it, before asking for the size.
@end display

You can use the command @command{TextColor(@var{color});} to change the
color of the text.  You can even set the background color of the 
text with the command @command{TextBackground(@var{color});}, but that
doesn't look as good as on a text-terminal.

Even the variable @code{TextAttr} is fully supported as in the 
original @code{CRT} unit.  But it is better to avoid the use of that.

The commands @command{HighVideo} and @command{LowVideo} are supported, 
althogh with a slightly different meaning. @command{HighVideo} switches
bold font on and @command{LowVideo} switches bold font off.  They do
not change the color as with the @code{CRT} unit.  Please keep that in 
mind, when you combine them with calls to @command{TextColor}.

With @command{Underlined(true);} you can switch underlined mod on
and @command{Underlined(false);} you can switch it off.

To switch back to the ``normal'' text-attributes, you should use the 
command @command{NormVideo;}.  The ``normal'' text-color is different
when you use it with AKFAvatar or with the @code{CRT} unit.  So with
this command you can ensure, that you get the desired result with 
both.  @command{NormVideo;} also switches the bold- and the
underlined-mode off.

The function @command{ReadKey} waits for a key to be pressed and returns
the code of the pressed key.  To find out, whether a key was pressed without
blocking the program, you can use the function @command{KeyPressed}.

@display
@strong{Attention:} 
Function keys are not supported yet.  The key @key{Esc} stops the
program immediately.  If you need the @key{Esc}-key for something
else, you can set the variable @code{CheckEsc} to @code{false}.
The program also stops when @key{Ctrl}+@key{C} is pressed.  You can
set the variable @code{CheckBreak} to @code{false} to avoid that.
The variable @code{CheckBreak} is compatible to the @code{CRT} unit,
while @code{CheckEsc} is an extension.
@end display

There are many additional commands, which are not compatible to the @code{CRT}
unit.

You can use a different image for the avatar with the command
@verbatim
{$IfDef AKFAVATAR}
  AvatarImageFile ('/usr/local/share/pixmaps/teacher.xpm');
{$EndIf}
@end verbatim
@noindent
This is of course only an example.
This command must be used before any input/output took place!
The size of the avatar image also influences the size of the text-area.  
Thus this must be used, before using the function @command{ScreenSize}.

If you want to change the background color of the window (not the text-area), 
you can use the command @command{setBackgroundColor(@var{red}, @var{green}, 
@var{blue});} at the beginning of the program.  The value for red, green and 
blue represent the intensity of that color.  You can mix up any possible color 
with these 3 values.  The maximum is 255 ($FF).  For example 
@samp{setBackgroundColor(0, 0, 100);} sets a dark blue background color.

You can define in your program which charset encoding you use.  If you
have an old system based on the Latin-1 charset, use the command
@code{@w{setEncoding ('ISO-8859-1');}}.  If you have to handle with different
charsets at the same time, you can repeat this command whenever you
want to change it.  Different charsets can be visible in the text-area at
the same time.  (Internally a Unicode charset is used.)

There are also characters for Hebrew or Yiddish texts.  To use them you
have to change the text direction.  You can do this with the command
@code{@w{setTextDirection (RightToLeft);}} and  
@code{@w{setTextDirection (LeftToRight);}}. 
Please make sure that you start a new line or page before or after using
this command.  Mixing different text directions in one line is not
supported.

The input/output is done with the common Pascal commands (Read, ReadLn,
Write, WriteLn, Page).  You can use the full Pascal formatting-syntax. 
For example: @samp{@w{WriteLn ('Pi is ', Pi:0:8, ' and so on.');}}

If you want to enforce a new page, use the command @command{page;}.  This is 
in fact also a Standard-Pascal command, which is seldom used; so seldom,
that it is even missing in Free Pascal.  But my unit defines it also for
Free Pascal.  Normally the command @command{page;} is used to get a new page
on a printer.

You can also clear the text-area with the command @command{ClrScr;}. 
Unlike @command{page;} the command @command{ClrScr;} doesn't wait, but
clears the text-area immediately.  You can put the cursor in a deliberate
position with the command @code{@w{GotoXY (x, y);}}.  You find out, where 
the cursor is with the functions @command{WhereX} or @command{WhereY}.  
The coordinates 1, 1 is in the upper left corner (independent from the text
direction).  You can find the maximum positions with @code{ScreenSize.x} and
@code{ScreenSize.y}.  All these names where chosen to get some compatibility
with the @code{CRT} unit.  Actually they don't handle the screen, but only the
text-area!

If you want to print warnings, error messages or debugging information to
the text-terminal, use the file-descriptor @code{stderr}. (This doesn't
work on Windows or ReactOS systems.) 
For example: @samp{WriteLn (stderr, 'Error: ', AvatarGetError);} Well, the
function @command{AvatarGetError} gets an error message from the library.

The command @command{ShowAvatar;} shows only the avatar without the balloon.
The commands @command{MoveAvatarIn;} or @command{MoveAvatarOut;} move the 
avatar in or out.  The Command @code{@w{Delay (500);}} waits approximately 
for 500 milliseconds.  If you prefer the scale in seconds use 
@code{@w{Delay (seconds(0.5));}}.

A full reference for the Pascal language can be found in 
@ref{Pascal reference}.

@node Pascal reference
@appendix Pascal reference
@cindex Pascal reference
@cindex reference for Pascal

The following text shows the @code{interface} of the Pascal unit
@code{akfavatar.pas}:

@verbatiminclude pasref.txt

@node C reference
@appendix C reference
@cindex reference for C

The following is the C header file @code{akfavatar.h}:

@verbatiminclude akfavatar.h

@node Color names
@appendix Names of colors
@cindex color names
@cindex names for colors

Color names are case-insensitive. Names with a space in between can 
sometimes not be used. But you can alwasy write them together in one word.

Other ways to define colors are described in @ref{Formats}.

The following color names are recognized:

snow, ghost white, GhostWhite, white smoke, WhiteSmoke, gainsboro,
floral white, FloralWhite, old lace, OldLace, linen, antique white,
AntiqueWhite, papaya whip, PapayaWhip, blanched almond, BlanchedAlmond,
bisque, peach puff, PeachPuff, navajo white, NavajoWhite, moccasin,
cornsilk, ivory, lemon chiffon, LemonChiffon, seashell, honeydew, mint
cream, MintCream, azure, alice blue, AliceBlue, lavender, lavender blush,
LavenderBlush, misty rose, MistyRose, white, black, dark slate gray,
DarkSlateGray, dark slate grey, DarkSlateGrey, dim gray, DimGray, dim
grey, DimGrey, slate gray, SlateGray, slate grey, SlateGrey, light slate
gray, LightSlateGray, light slate grey, LightSlateGrey, gray, grey, light
grey, LightGrey, light gray, LightGray, midnight blue, MidnightBlue, navy,
navy blue, NavyBlue, cornflower blue, CornflowerBlue, dark slate blue,
DarkSlateBlue, slate blue, SlateBlue, medium slate blue, MediumSlateBlue,
light slate blue, LightSlateBlue, medium blue, MediumBlue, royal blue,
RoyalBlue, blue, dodger blue, DodgerBlue, deep sky blue, DeepSkyBlue,
sky blue, SkyBlue, light sky blue, LightSkyBlue, steel blue, SteelBlue,
light steel blue, LightSteelBlue, light blue, LightBlue, powder blue,
PowderBlue, pale turquoise, PaleTurquoise, dark turquoise, DarkTurquoise,
medium turquoise, MediumTurquoise, turquoise, cyan, light cyan,
LightCyan, cadet blue, CadetBlue, medium aquamarine, MediumAquamarine,
aquamarine, dark green, DarkGreen, dark olive green, DarkOliveGreen,
dark sea green, DarkSeaGreen, sea green, SeaGreen, medium sea green,
MediumSeaGreen, light sea green, LightSeaGreen, pale green, PaleGreen,
spring green, SpringGreen, lawn green, LawnGreen, green, chartreuse,
medium spring green, MediumSpringGreen, green yellow, GreenYellow, lime
green, LimeGreen, yellow green, YellowGreen, forest green, ForestGreen,
olive drab, OliveDrab, dark khaki, DarkKhaki, khaki, pale goldenrod,
PaleGoldenrod, light goldenrod yellow, LightGoldenrodYellow, light
yellow, LightYellow, yellow, gold, light goldenrod, LightGoldenrod,
goldenrod, dark goldenrod, DarkGoldenrod, rosy brown, RosyBrown, indian
red, IndianRed, saddle brown, SaddleBrown, sienna, peru, burlywood,
beige, wheat, sandy brown, SandyBrown, tan, chocolate, firebrick, brown,
dark salmon, DarkSalmon, salmon, light salmon, LightSalmon, orange, dark
orange, DarkOrange, coral, light coral, LightCoral, tomato, orange red,
OrangeRed, red, hot pink, HotPink, deep pink, DeepPink, pink, light pink,
LightPink, pale violet red, PaleVioletRed, maroon, medium violet red,
MediumVioletRed, violet red, VioletRed, magenta, violet, plum, orchid,
medium orchid, MediumOrchid, dark orchid, DarkOrchid, dark violet,
DarkViolet, blue violet, BlueViolet, purple, medium purple, MediumPurple,
thistle, snow1, snow2, snow3, snow4, seashell1, seashell2, seashell3,
seashell4, AntiqueWhite1, AntiqueWhite2, AntiqueWhite3, AntiqueWhite4,
bisque1, bisque2, bisque3, bisque4, PeachPuff1, PeachPuff2, PeachPuff3,
PeachPuff4, NavajoWhite1, NavajoWhite2, NavajoWhite3, NavajoWhite4,
LemonChiffon1, LemonChiffon2, LemonChiffon3, LemonChiffon4,
cornsilk1, cornsilk2, cornsilk3, cornsilk4, ivory1, ivory2, ivory3,
ivory4, honeydew1, honeydew2, honeydew3, honeydew4, LavenderBlush1,
LavenderBlush2, LavenderBlush3, LavenderBlush4, MistyRose1, MistyRose2,
MistyRose3, MistyRose4, azure1, azure2, azure3, azure4, SlateBlue1,
SlateBlue2, SlateBlue3, SlateBlue4, RoyalBlue1, RoyalBlue2, RoyalBlue3,
RoyalBlue4, blue1, blue2, blue3, blue4, DodgerBlue1, DodgerBlue2,
DodgerBlue3, DodgerBlue4, SteelBlue1, SteelBlue2, SteelBlue3, SteelBlue4,
DeepSkyBlue1, DeepSkyBlue2, DeepSkyBlue3, DeepSkyBlue4, SkyBlue1,
SkyBlue2, SkyBlue3, SkyBlue4, LightSkyBlue1, LightSkyBlue2, LightSkyBlue3,
LightSkyBlue4, SlateGray1, SlateGray2, SlateGray3, SlateGray4,
LightSteelBlue1, LightSteelBlue2, LightSteelBlue3, LightSteelBlue4,
LightBlue1, LightBlue2, LightBlue3, LightBlue4, LightCyan1, LightCyan2,
LightCyan3, LightCyan4, PaleTurquoise1, PaleTurquoise2, PaleTurquoise3,
PaleTurquoise4, CadetBlue1, CadetBlue2, CadetBlue3, CadetBlue4,
turquoise1, turquoise2, turquoise3, turquoise4, cyan1, cyan2, cyan3,
cyan4, DarkSlateGray1, DarkSlateGray2, DarkSlateGray3, DarkSlateGray4,
aquamarine1, aquamarine2, aquamarine3, aquamarine4, DarkSeaGreen1,
DarkSeaGreen2, DarkSeaGreen3, DarkSeaGreen4, SeaGreen1, SeaGreen2,
SeaGreen3, SeaGreen4, PaleGreen1, PaleGreen2, PaleGreen3, PaleGreen4,
SpringGreen1, SpringGreen2, SpringGreen3, SpringGreen4, green1, green2,
green3, green4, chartreuse1, chartreuse2, chartreuse3, chartreuse4,
OliveDrab1, OliveDrab2, OliveDrab3, OliveDrab4, DarkOliveGreen1,
DarkOliveGreen2, DarkOliveGreen3, DarkOliveGreen4, khaki1, khaki2,
khaki3, khaki4, LightGoldenrod1, LightGoldenrod2, LightGoldenrod3,
LightGoldenrod4, LightYellow1, LightYellow2, LightYellow3, LightYellow4,
yellow1, yellow2, yellow3, yellow4, gold1, gold2, gold3, gold4,
goldenrod1, goldenrod2, goldenrod3, goldenrod4, DarkGoldenrod1,
DarkGoldenrod2, DarkGoldenrod3, DarkGoldenrod4, RosyBrown1, RosyBrown2,
RosyBrown3, RosyBrown4, IndianRed1, IndianRed2, IndianRed3, IndianRed4,
sienna1, sienna2, sienna3, sienna4, burlywood1, burlywood2, burlywood3,
burlywood4, wheat1, wheat2, wheat3, wheat4, tan1, tan2, tan3, tan4,
chocolate1, chocolate2, chocolate3, chocolate4, firebrick1, firebrick2,
firebrick3, firebrick4, brown1, brown2, brown3, brown4, salmon1, salmon2,
salmon3, salmon4, LightSalmon1, LightSalmon2, LightSalmon3, LightSalmon4,
orange1, orange2, orange3, orange4, DarkOrange1, DarkOrange2, DarkOrange3,
DarkOrange4, coral1, coral2, coral3, coral4, tomato1, tomato2, tomato3,
tomato4, OrangeRed1, OrangeRed2, OrangeRed3, OrangeRed4, red1, red2, red3,
red4, DebianRed, DeepPink1, DeepPink2, DeepPink3, DeepPink4, HotPink1,
HotPink2, HotPink3, HotPink4, pink1, pink2, pink3, pink4, LightPink1,
LightPink2, LightPink3, LightPink4, PaleVioletRed1, PaleVioletRed2,
PaleVioletRed3, PaleVioletRed4, maroon1, maroon2, maroon3, maroon4,
VioletRed1, VioletRed2, VioletRed3, VioletRed4, magenta1, magenta2,
magenta3, magenta4, orchid1, orchid2, orchid3, orchid4, plum1,
plum2, plum3, plum4, MediumOrchid1, MediumOrchid2, MediumOrchid3,
MediumOrchid4, DarkOrchid1, DarkOrchid2, DarkOrchid3, DarkOrchid4,
purple1, purple2, purple3, purple4, MediumPurple1, MediumPurple2,
MediumPurple3, MediumPurple4, thistle1, thistle2, thistle3, thistle4,
gray0, grey0, gray1, grey1, gray2, grey2, gray3, grey3, gray4, grey4,
gray5, grey5, gray6, grey6, gray7, grey7, gray8, grey8, gray9, grey9,
gray10, grey10, gray11, grey11, gray12, grey12, gray13, grey13, gray14,
grey14, gray15, grey15, gray16, grey16, gray17, grey17, gray18, grey18,
gray19, grey19, gray20, grey20, gray21, grey21, gray22, grey22, gray23,
grey23, gray24, grey24, gray25, grey25, gray26, grey26, gray27, grey27,
gray28, grey28, gray29, grey29, gray30, grey30, gray31, grey31, gray32,
grey32, gray33, grey33, gray34, grey34, gray35, grey35, gray36, grey36,
gray37, grey37, gray38, grey38, gray39, grey39, gray40, grey40, gray41,
grey41, gray42, grey42, gray43, grey43, gray44, grey44, gray45, grey45,
gray46, grey46, gray47, grey47, gray48, grey48, gray49, grey49, gray50,
grey50, gray51, grey51, gray52, grey52, gray53, grey53, gray54, grey54,
gray55, grey55, gray56, grey56, gray57, grey57, gray58, grey58, gray59,
grey59, gray60, grey60, gray61, grey61, gray62, grey62, gray63, grey63,
gray64, grey64, gray65, grey65, gray66, grey66, gray67, grey67, gray68,
grey68, gray69, grey69, gray70, grey70, gray71, grey71, gray72, grey72,
gray73, grey73, gray74, grey74, gray75, grey75, gray76, grey76, gray77,
grey77, gray78, grey78, gray79, grey79, gray80, grey80, gray81, grey81,
gray82, grey82, gray83, grey83, gray84, grey84, gray85, grey85, gray86,
grey86, gray87, grey87, gray88, grey88, gray89, grey89, gray90, grey90,
gray91, grey91, gray92, grey92, gray93, grey93, gray94, grey94, gray95,
grey95, gray96, grey96, gray97, grey97, gray98, grey98, gray99, grey99,
gray100, grey100, dark grey, DarkGrey, dark gray, DarkGray, dark blue,
DarkBlue, dark cyan, DarkCyan, dark magenta, DarkMagenta, dark red,
DarkRed, light green, LightGreen


@node Concept Index
@unnumbered Index

@printindex cp

@bye
